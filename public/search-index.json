[{"content":"👋 Hi, I\u0026rsquo;m Prashant — The CAD Coder\nI\u0026rsquo;m a Lead Software Developer in the IT department of a mechanical‑engineering company.\nBefore that, I spent 8 years as a SolidWorks design engineer, so I know exactly where real‑world CAD workflows bog down.\nSince 2019 I’ve been automating those bottlenecks with C#, VBA, WPF, and the SolidWorks API (and lately the Autodesk Inventor API).\nThe CAD Coder exists so other engineers can skip the trial‑and‑error I went through.\n💡 Why I Started The CAD Coder Most CAD‑automation tutorials are outdated, incomplete, or ignore production realities.\nThis site fixes that by:\nTeaching macros that solve actual engineering problems Sharing production‑ready code I use at work Bridging the gap between CAD users and developer‑grade automation 🧰 What You’ll Find Here SolidWorks C# tutorials (WPF + MVVM) Reusable code snippets and full walkthrough videos Legacy VBA scripts where they still make sense Practical tips to cut hours of repetitive CAD work 🚀 Start Here 👉 Browse SolidWorks C# Tutorials 👉 Check out my YouTube channel 🎁 Download 5 Free SolidWorks Macros → Cut hours of repetitive work with real macros I use daily —\nfor drawing export, renaming files, and updating properties.\nIf you’re tired of exporting, renaming, or updating properties by hand, you’re in the right place.\nLet’s automate that work away together — and if you build something cool from what you learn here, tell me about it.\n— Prashant\nLead Software Developer \u0026amp; Founder of The CAD Coder\nConnect with me on LinkedIn\n","date":"2025-07-09","id":0,"permalink":"/aboutMe/","summary":"\u003cp\u003e👋 Hi, I\u0026rsquo;m Prashant — The CAD Coder\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m a \u003cstrong\u003eLead Software Developer\u003c/strong\u003e in the IT department of a mechanical‑engineering company.\u003cbr\u003e\nBefore that, I spent \u003cstrong\u003e8 years as a SolidWorks design engineer\u003c/strong\u003e, so I know exactly where real‑world CAD workflows bog down.\u003c/p\u003e","tags":[],"title":"About"},{"content":"🚀 Tools \u0026amp; Resources I Use (and Recommend)\nThis is a curated list of the resources that have helped me learn programming and SolidWorks API automation — including books, tutorials, tools, and frameworks.\nIf you\u0026rsquo;re just getting started or looking to go deeper, this page can guide your learning path.\n👉 Want to know how I learn programming? Check out my About Me page.\n📘 Learning VBA for Excel \u0026amp; SolidWorks Book: Excel Macros for Dummies Great for learning VBA from scratch. It helped me understand the core syntax and build confidence with macros.\n🛒 Buy on Amazon\n🎓 Prefer not to buy? No worries! You can also check out my VBA tutorials here.\n🛠 SolidWorks VBA Macro Tutorials YouTube: 🚀 Automate SolidWorks with VBA macros A practical, beginner-friendly channel to get started with SolidWorks macros.\n📚 Want more? I write detailed tutorials on SolidWorks VBA Macros on this blog.\nBook: Automating SolidWorks 2025 Using Macros While I haven’t personally read this, it’s one of the few books on macro automation that’s up-to-date.\n🛒 Buy on Amazon\n📥 You can also download free books by AngelSix.\n💻 C# Programming for SolidWorks Automation YouTube: AngelSix C# Tutorials These are gold. Professional, clean, and beginner-friendly — taught by a CAD engineer.\nLuke (AngelSix) has deep experience with SolidWorks and Inventor automation.\n🧑‍💻 About AngelSix\nBook: C# 7.0 in a Nutshell I regularly use this as a reference — great for understanding C# features in detail.\n🛒 Buy on Amazon\n🧩 SolidWorks C# Add-in Development YouTube: SolidDNA Add-in Framework A great intro to creating SolidWorks Add-ins using C# and WPF.\nI\u0026rsquo;m covering this in detail on the blog soon — stay tuned.\n⚙️ Learning C++ (for SolidWorks API) Books by Bjarne Stroustrup Programming: Principles and Practice Using C++ — best for beginners. The C++ Programming Language — more advanced. I suggest starting with Programming: Principles and Practice — it teaches how to think like a programmer.\n📌 There\u0026rsquo;s very little SolidWorks C++ API material online. But I’ve created some small apps and may share those soon.\n🎁 Bonus: My Debugging Toolkit Here’s what I do when I get stuck:\n🔍 SolidWorks Offline Help Still my most-used reference. If web help doesn’t open, go to:\nHelp → uncheck Use SOLIDWORKS Web Help Go to API Help Use the Index tab to search topics (e.g., hole wizard) Tip: Look at the built-in sample code. It often solves 80% of your problem.\n🌐 Google Like a Pro Search like this:\n\u0026ldquo;How to open Excel in SolidWorks VBA\u0026rdquo;\nThis usually leads me to forum answers, even without logging in.\n💬 SolidWorks Forum Search before asking. If your question is unique, post it — the community is helpful (especially for macros).\n💡 StackOverflow Perfect for language-specific issues in C#, VBA, or WPF. Even without an account, I often find solutions here.\n🙌 Final Note If you found this page helpful and plan to buy a book, consider using my Amazon links — they support this blog at no extra cost to you.\nAnd if you liked the content, share this site with your friends or colleagues in CAD automation.\nStay curious. Stay building. 🚀\n","date":"2025-07-09","id":1,"permalink":"/resources/","summary":"\u003cp\u003e🚀 Tools \u0026amp; Resources I Use (and Recommend)\u003c/p\u003e\n\u003cp\u003eThis is a curated list of the \u003cstrong\u003eresources\u003c/strong\u003e that have helped me learn \u003cstrong\u003eprogramming\u003c/strong\u003e and \u003cstrong\u003eSolidWorks API automation\u003c/strong\u003e — including books, tutorials, tools, and frameworks.\u003c/p\u003e","tags":[],"title":"Resources"},{"content":"","date":"2023-09-07","id":2,"permalink":"/vba/getting-started/","summary":"","tags":[],"title":"Getting Started"},{"content":"To understand Visual Basic for Application, lets look at the following questions.\nWhat is Visual Basic for Application? Visual Basic for Applications also known as VBA, is a programming language developed by Microsoft.\nSOLIDWORKS, along with Excel and other software of Office Suit, includes VBA language (at no extra cost).\nIn a nutshell, VBA is a tool that people use to develop program that control SOLIDWORKS.\nThink about a robot that knows everything about SOLIDWORKS. This robot can read instruction, and it can also operate SOLIDWORKS very fast and accurate.\nWhen you want the robot to do something in SOLIDWORKS, you write up a set of robotic instruction by using special codes.\nTell the robot to follow your instruction, while you sit back and take some rest. That’s kind of what VBA is all about.\nWhat can you do with VBA? You know that people use different CAD softwares, not just SOLIDWORKS, for different tasks.\nBelow is a list of some common tasks:\nCreating sketches\nCreating 3D models\nCreating Simple to Complex assemblies of 3D models\nLinking files with external softwares mostly excel and many more tasks\nThis list could go on and on, but you get the idea.\nMy point is simply that a CAD Software like SOLIDWORKS used for wide variety of things.\nEveryone visiting this blog has different needs and expectations.\nOne thing virtually every visitor has common is the need to automate some aspect of their work. That is what VBA is all about.\nWhat are the advantages and disadvantages of VBA? In this section, I briefly describe the good things about VBA – and I also explore its darker side.\nVBA Advantages You can automate almost anything you do in SOLIDWORKS.\nTo do so, you write instructions that SOLIDWORKS carries out.\nAutomating a task by using VBA offers several advantages:\nSOLIDWORKS always executes the tasks in exactly the same way. (In most cases consistency is good.)\nSOLIDWORKS performs the task much faster than you do it manually.\nIf you are a good macro programmer, SOLIDWORKS always performs the task without error.\nIf you set things properly, someone who don’t know anything about SOLIDWORKS can perform task.\nFor long, time-consuming tasks, you don’t have to sit in front of your computer and get board. SOLIDWORKS does work, while you drink water.\nVBA disadvantages It’s only fair that I give equal time to listing the disadvantages (or potential disadvantages) of VBA:\nYou have to know how to write programs in VBA (but that’s why you are here, right?). Fortunately, it’s not as difficult as you might expect.\nSometimes, things go wrong. In other words, you can’t blindly assume that your VBA program will always work correctly under all circumstances. Welcome to world of debugging and, if others are using your macros, be prepared for technical support.\nVBA in nutshell Just to let you know what you are in for, I’ve prepared a quick summary of what VBA is all about.\nYou perform actions in VBA by writing (or recording) code in a VBA module. You view and edit VBA modules by using the Visual Basic Editor (VBE).\nA VBA module consists of Sub procedures. A sub procedure is a chunk of computer code that performs some action on or with objects. The following example shows a simple Sub procedure called AddThem.\nThis amazing program displays the result of 1 plus 1.\nvba\r1Sub AddThem() 2 Sum = 1 + 1 3 MsgBox (\u0026#34;The answer is \u0026#34; \u0026amp; Sum) 4End Sub\rNext post will be about Visual Basic Editor or VBE.\n","date":"0001-01-01","id":3,"permalink":"/vba/vba-Introduction/","summary":"\u003cp\u003eTo understand \u003ccode\u003eVisual Basic for Application\u003c/code\u003e, lets look at the following \u003cem\u003equestions\u003c/em\u003e.\u003c/p\u003e\n\u003ch2 id=\"what-is-visual-basic-for-application\"\u003eWhat is Visual Basic for Application?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eVisual Basic for Applications\u003c/code\u003e also known as \u003ccode\u003eVBA\u003c/code\u003e, is a \u003cem\u003eprogramming language\u003c/em\u003e developed by \u003cstrong\u003eMicrosoft\u003c/strong\u003e.\u003c/p\u003e","tags":[],"title":"Visual Basic for Application Introduction"},{"content":"","date":"2023-09-07","id":4,"permalink":"/vba/programming-concepts/","summary":"","tags":[],"title":"Programming Concepts"},{"content":"Visual Basic Editor or VBE is a separate application in your CAD application.\nIn this application you write and edit your Macro code.\nThis application works without a glitch with most of the CAD programs.\nBy without a glitch I mean that your CAD program take cares of opening of VBE when you need it.\nNote\nyou can’t run the VBE separately. You CAD program must be running in order to run VBE.\nVBE Environment Below figure shows the VBE program, with some of the key parts given.\nChances are that your VBE program window won’t look exactly like that below figure.\nThe VBE contains several windows, and it’s highly customizable. You can hide windows, rearrange windows, dock windows, and so on.\nMenu Bar The VBE Menu Bar works just like every menu bar of other applications.\nIt contains commands that you use to do things with the various components in the VBE.\nYou also find that many of the menu commands have shortcut keys associated with them.\nThe VBE also features shortcut menus. You can right-click virtually anything in the VBE and get a shortcut menu of common commands.\nTool Bar The Standard toolbar, which is directly under the menu bar by default (refer to above figure), is one of four VBE toolbars available. You can customize the toolbars.\nIf you’re so inclined, use the View Toolbars command to work with VBE toolbars.\nMost people just leave them as they are.\nProject Window The Project Window display a tree diagram that shows every file opened.\nIf the Project Window is not visible, press “Ctrl+R” or use the View -\u0026gt; Project Explorer command.\nTo hide the Project Window, click the close button in its title bar.\nCode Window Code Window is place where we write our code. Therefore this window contains VBA code.\nEvery object in a project has association with Code Window. To view the code for any object’s, double click on the object in the Project Window.\nUnless you have added some VBA code, the Code window will be empty.\nImmediate Window The Immediate window may or may not visible. If it is not visible, press “Ctrl+G” or use View -\u0026gt; Immediate window command.\nTo close The Immediate window, click the close button in its title bar.\nThe Immediate window is most useful for executing VBA statement directly and for debugging your code.\nIf you are just starting VBA, this window won’t be all that useful, so feel free to hide it and free up some screen space.\nNext post will be about VBE Windows.\n","date":"0001-01-01","id":5,"permalink":"/vba/vba-vbe-editor/","summary":"\u003cp\u003e\u003ccode\u003eVisual Basic Editor\u003c/code\u003e or \u003ccode\u003eVBE\u003c/code\u003e is a \u003cem\u003eseparate\u003c/em\u003e application in your \u003cem\u003eCAD application\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eIn this \u003cem\u003eapplication\u003c/em\u003e you \u003ccode\u003ewrite\u003c/code\u003e and \u003ccode\u003eedit\u003c/code\u003e your \u003cem\u003eMacro code\u003c/em\u003e.\u003c/p\u003e","tags":[],"title":"Visual Basic Editor (VBE)"},{"content":"In this post we look at the following windows in Visual Basic Editor:\nProject Window Code Window Project Window When you are working in VBE, each file open is called a Project.\nYou can think of a project as a collection of objects.\nYou can expand a project by clicking the plus sign (+) at the left of the project’s name in the Project window.\nContract a project by clicking the minus sign (-) to the left of the project’s name in the Project window. Or you can simply double-click the items to expand or contract them.\nEvery project expands to show at least one node. In our previous image we have SOLIDWORKS Objects. This node expands to show an item for Solidworks application.\nIf the project has any VBA module, the project listing also shows a Module node.\nA project can also contain a node called Forms, which contains UserForm objects (which hold custom dialog boxes).\nThe concept of Object may not be clear to you at this moment. However, things become much clearer in subsequent topics.\nDon’t be too concerned if you don’t understand what’s going on at this point.\nAdding a New VBA Module Follow the steps below to add a new VBA module to a project:\nSelect the project\u0026rsquo;s name in the Project Window. Select Insert → Module. or\nRight-click the project’s name. Select Insert → Module from the shortcut menu. When you record a macro or create a blank macro, Solidworks automatically adds a module to hold the code.\nRemoving a VBA Module If you want to remove a module from the Project window, follow the steps below:\nSelect the module\u0026rsquo;s name in the Project Window. Select File → Remove. Or\nRight-click the module’s name. Select Remove from the shortcut menu. VBE always tries to keep you from doing something that you will regret, hence it will ask if you want to export the code in the module before deleting the code.\nAnd in most cases, you don’t want to export. If you do want to export the code, please see the next section.\nExporting and Importing Objects Every object in a VBA project can be saved to a separate file. Saving an individual object in a project is known as exporting.\nThe reason for exporting a file is that you can also import objects into a project.\nExporting and importing objects might be useful if you want to use a particular object (such as a VBA module or a UserForm) in a different project.\nBelow are the steps to export an object:\nSelect an object in the Project window. Select File → Export File or press Ctrl + E. You get a dialog box that asks for a filename. Note that the object remains in the original project; only a copy of the object is exported.\nImporting an object is also a similar process, which is shown below:\nSelect the project’s name in the Explorer window. Select File → Import File or press Ctrl + M. You get a dialog box that asks for a file. Locate the file and click open.\nYou should only import a file if it was exported by using the File → Export File command.\nCode Window As you become proficient with VBA, you spend a lot of time working in the Code window.\nMacros that you record are stored in a module, and you can type VBA code directly into a VBA module.\nMinimize and Maximize Code Windows If you have several projects open, the VBE may have lots of Code windows at any given time. Below is an example of this.\nCode windows are much like your files opened in Solidworks. You can minimize them, maximize them, resize them, hide them, and so on.\nMost people find it much easier to maximize the code window that they are working on. Doing so lets you see more code and keeps you from getting distracted.\nTo maximize the Code window, click the maximize button in its title bar or just double-click the title bar of the Code window to maximize it.\nTo restore a window to its original size, click the restore button. When the Code window is maximized, its title bar is not visible, so you will find the restore below the VBE title bar.\nSometimes you want to have two or more Code windows visible.\nFor example, you may want to compare the code in two modules or copy code from one module to another.\nYou can arrange the windows manually, or use the Window → Tile Horizontally or Window → Tile Vertically command to arrange them automatically.\nYou can quickly switch among code windows by pressing Ctrl + Tab. If you repeat that key combination, you keep cycling through all the open code windows.\nPressing Ctrl + Shift + Tab cycles through the windows in reverse order.\nMinimizing a window gets it out of the way. You can also click the window close button in a Code window’s title bar to close the window completely. (Closing a window just hides it; you won’t lose anything.)\nTo open it again, just double-click the appropriate object in the Project window. Working with these Code windows sounds more difficult than it really is.\nCreating a Module In general, a VBA module can hold three types of code:\nDeclaration: One or more information statements that you provide to VBA. For example, you can declare the data type for variables you plan to use, or set some other module-wide options. Sub procedures: A set of programming instructions that perform some actions. Function procedures: A set of programming instructions that return a single value. A single VBA module can store any number of Sub procedures, Function procedures, and declarations.\nWell, there is a limit – about 64,000 characters per module. It is very rare that anybody reaches that limit, but if someone does, the solution is simply to insert a new module.\nHow you organize a VBA module is totally up to you. Some people prefer to keep all their VBA code in a single module; others (like me) like to split up the code into several different modules or even classes. It is a personal choice, like arranging furniture.\nInserting VBA Code into a Module An empty VBA module is like the fake food you see in advertisements. It looks good but it does not really do much.\nBefore you can do anything meaningful, you must have some VBA code in the VBA module. You can insert VBA code into a VBA module in three ways:\nInsert code directly into the code window. Use the macro recorder to record your actions and convert them into VBA code. Copy the code from one module and paste it into another module. Entering Code Directly into a Module Sometimes the best route is the most direct one. Entering the code directly involves typing the code via your keyboard.\nEntering and editing text in a VBA module works as you might expect. You can select, copy, cut, paste, and do other things as you do in other word processing software.\nUse the Tab key to indent some of the lines to make your code easier to read. This is not necessary, but it is a good habit to acquire.\nAs you go through, you will understand why indenting code lines is helpful.\nA single line of VBA code can be as long as you like.\nHowever, you may want to use the line-continuation character to break up a lengthy line of code.\nTo continue a single line of code (also known as a statement) from one line to the next, end the first line with a space followed by an underscore (_). Then continue the statement on the next line.\nBelow is an example of a single statement split into two lines:\nvba\r1set swPart = swApp.NewDocument(swApp.GetUserPreferenceStringValue _ 2 (swUserPreferenceStringValue_e.swDefaultTemplatePart),0,0,0)\rThis statement would perform the same way if it were entered in a single line (with no continuation characters).\nNotice that I indented the second line of the statement. Indenting is optional but it clarifies the fact that these lines are not separate statements.\nNote\nIf you are wondering what the above statement does, then the answer is: it opens a new part with the default part template in SolidWorks. This code is not inserted using the macro recorder; instead, I wrote it manually to find a default part template and use that template to open a new part.\nThe engineers who designed VBE knew that people like us would be making mistakes. Therefore, the VBE has multiple levels of Undo and Redo.\nIf you deleted a statement that you should not have, use the Undo button on the toolbar (or press Ctrl+Z) until the statement shows up.\nAfter undoing, you can use the Redo button to perform the changes you have undone. This redo/undo stuff is much like you use in other software. Until you use it, you cannot understand.\nReady to enter some live code? Try the following steps:\nGo to your VBE. Double-click your module if it is not open. Go to the Code Window. Type the following code into the Code window: vba\r1Sub GuessName() 2 Msg = \u0026#34;Is this a CAD Software?\u0026#34; 3 Ans = MsgBox(Msg, vbYesNo) 4 If Ans = vbNo Then MsgBox \u0026#34;Oh, that’s fine.\u0026#34; 5 If Ans = vbYes Then MsgBox \u0026#34;You must be joking!\u0026#34; 6End Sub\rMake sure the cursor is located anywhere within the text you typed, and then press F5 to execute the procedure. F5 is a shortcut for the Run → Run Sub/UserForm command.\nIf you entered the code correctly, VBE will execute the procedure, and you can respond to the simple dialog box as shown in the figure below.\nWhen you enter the code listed in step 4, you might notice that the VBE makes some adjustments to the text you enter.\nFor example, after you type the Sub statement, the VBE automatically inserts the End Sub statement, and if you omit the space before or after an equal sign, the VBE inserts the space for you.\nAlso, the VBE changes the color and capitalization of some text. This is all perfectly normal. It is just VBE’s way of keeping things neat and readable.\nIf you followed the previous steps, you just wrote a VBA Sub procedure, also known as a macro.\nWhen you press F5, VBE executes the code and follows the instructions.\nIn other words, VBE evaluates each statement and does what you told it to do.\nThis simple macro uses the following concepts:\nDefining a Sub procedure (the first line). Assigning values to variables (Msg and Ans). Using a built-in VBA function (MsgBox). Using built-in VBA constants (vbYesNo, vbNo, and vbYes). Using an If-Then construct (twice). Ending a Sub procedure (the last line). Using the Macro Recorder Another way you can get code into a VBA module is by recording your actions, using the in-built macro recorder.\nBy the way, there is absolutely no way you can record the GuessName procedure shown in the preceding section.\nYou can record only things that you can do directly in Solidworks.\nDisplaying a message box is not in the application\u0026rsquo;s normal repertoire. The macro recorder is useful, but in many cases, you’ll probably need to enter at least some code manually.\nWe have already seen how macros are recorded. So there is no need for us to go over the same thing twice. If you want to see how it is done, go to VBA in Solidworks topic.\nCopying VBA Code The final method for getting code into a VBA module is to copy it from another module or from some other place (such as a website, e.g., Solidworks forum).\nFor example, a Sub or Function procedure that you write for one project might also be useful in another project.\nInstead of wasting time re-entering the code, you can activate the module and use the normal Clipboard copy-and-paste procedures.\nAfter pasting it into a VBA module, you can modify the code if necessary.\nYou’ll also find lots of VBA code examples on the web.\nIf you’d like to try them, select the code in your browser and press Ctrl+C to copy it. Then, activate a module and press Ctrl+V to paste it.\nNext post will be about Sub and Function Procedures.\n","date":"0001-01-01","id":6,"permalink":"/vba/vba-windows/","summary":"\u003cp\u003eIn this post we look at the following windows in \u003ccode\u003eVisual Basic Editor\u003c/code\u003e:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eProject Window\u003c/li\u003e\n\u003cli\u003eCode Window\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"project-window\"\u003eProject Window\u003c/h2\u003e\n\u003cp\u003eWhen you are working in \u003ccode\u003eVBE\u003c/code\u003e, each file open is called a Project.\u003cbr\u003e\nYou can think of a \u003ccode\u003eproject\u003c/code\u003e as a \u003ccode\u003ecollection\u003c/code\u003e of objects.\u003c/p\u003e","tags":[],"title":"VBE Windows"},{"content":"The VBA code that you write in the Visual Basic Editor is known as a procedure.\nThe two most common types of procedures are Sub and Function.\nA Sub procedure is a group of VBA statements that performs an action (or actions). A Function procedure is a group of VBA statements that performs a calculation and returns a single value. Most of the macros you write in VBA are Sub procedures.\nYou can think of a Sub procedure as being like a command: \u0026ldquo;Execute the Sub procedure and something happens\u0026rdquo;.\nExactly what happens depends on the Sub procedure’s VBA code.\nA Function is also a procedure, but it’s quite different from a Sub.\nFor understanding a Function let’s take an example from MS Excel.\nExcel includes many worksheet functions that you use every day. Examples include SUM. This SUM function takes input in form of values and then it does calculation behind the scene, and then returns a single value.\nThe same goes for Function procedure that you develop with VBA.\nSub procedures Every Sub procedure starts with the keyword Sub and ends with an End Sub statement. Here’s an example:\nvba\r1Sub Message() 2 MsgBox \u0026#34;That’s all folks!\u0026#34; 3End Sub\rThis example shows a procedure named Message. A set of parentheses follows the procedure’s name.\nIn most cases, these parentheses are empty. However, you may pass arguments to Sub procedures from other procedures.\nIf your Sub uses arguments, list them between the parentheses.\nNote\nPlease remember when you record a macro with the macro recorder; the result is always a Sub procedure.\nFunction procedures Every Function procedure starts with the keyword Function and ends with an End Function statement.\nHere’s an example:\nvba\r1Function CubeRoot(number) 2 CubeRoot = number ^ (1/3) 3End Function\rThis function, named CubeRoot, takes one argument (named number), which is enclosed in parentheses.\nFunctions can have any number of arguments or none at all.\nWhen you execute the function, it returns a single value — the cube root of the argument passed to the function.\nVBA allows you to specify what type of information (also known as data type) is returned by a Function procedure.\nYou can execute a Function procedure from another procedure (a Sub or another Function procedure).\nNote\nPlease note that no matter how hard you try, you can’t use the macro recorder to record a Function procedure. You must manually enter every Function procedure that you create.\nNaming Subs and Functions Like humans \u0026amp; pets, every Sub and Function procedure must have a name.\nAlthough it is perfectly acceptable to name anything what you want, it’s usually not a good idea to use such a freewheeling attitude when naming procedures.\nWhen naming procedures, you must follow a few rules:\nYou can use letters, numbers, and some punctuation characters, but the first character must be a letter. You can’t use any spaces or periods in the name. VBA does not distinguish between uppercase and lowercase letters. You can’t embed any of the following characters in a procedure name: *#, $, %, \u0026amp;, @, ^, , or ! Procedure names can be no longer than 255 characters. (Of course, you would never make a procedure name this long.) Ideally, a procedure’s name describes the routine’s purpose.\nSome programmers prefer using sentence-like names that provide a complete description of the procedure.\nSome examples include WriteReportToTextFile and Get_Print_Options_and_Print_Report.\nThe use of such lengthy names has pros and cons.\nOn the one hand, such names are descriptive and usually unambiguous. On the other hand, they take longer to type.\nEveryone develops a naming style, but the main objectives are to make the names descriptive and to avoid meaningless names such as Update, Fix, and Macro1.\nNext post will be about Executing Sub \u0026amp; Function procedures\n","date":"0001-01-01","id":7,"permalink":"/vba/sub-and-function-procedure/","summary":"\u003cp\u003eThe \u003ccode\u003eVBA\u003c/code\u003e code that you write in the \u003ccode\u003eVisual Basic Editor\u003c/code\u003e is known as a \u003ccode\u003eprocedure\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe two most common types of procedures are \u003ccode\u003eSub\u003c/code\u003e and \u003ccode\u003eFunction\u003c/code\u003e.\u003c/p\u003e","tags":[],"title":"Sub and Function Procedures"},{"content":"Although you may not know much about developing procedures at this point, I’m going to jump ahead a bit and discuss how to execute these procedures.\nThis is important because these procedures are worthless unless you know how to execute it.\nExecuting Sub procedure Executing a Sub procedure means the same thing as running or calling a Sub procedure.\nYou can use whatever terminology you like.\nYou can execute a VBA Sub in many ways - that’s one reason you can do so many useful things with Sub procedures.\nHere’s a list of the ways to execute a Sub procedure:\nWith the Run -\u0026gt; Run Sub/UserForm command (in the VBE). VBE executes the Sub procedure in which the cursor is located. This menu command has two alternatives: the F5 key and the Run Sub/UserForm button on the Standard toolbar in the VBE. These methods don’t work if the procedure requires one or more arguments. From another Sub procedure that you write. From a custom item on the ribbon you develop. From the Immediate window in the VBE. Just type the name of the Sub procedure and press Enter. From Run Macro -\u0026gt; Select Macro you want to run. By this, your macro runs the Sub procedure without opening VBE. I demonstrate some of these techniques in the following sections.\nBefore I can do that, you need to enter a Sub procedure into a VBA module as suggested below:\nOpen the VBE in Solidworks.\nEnter the following code into your module\nvba\r1 Sub CubeRoot() 2 Number = InputBox(\u0026#34;Enter a positive number.\u0026#34;) 3 MsgBox number ^ (1/3) \u0026amp; \u0026#34;is the cube root.\u0026#34; 4 End Sub\rThis procedure asks the user for a number and then displays that number’s cube root in a message box.\nBelow Figures shows what happens when you execute this procedure.\nI entered 4 as input value. And get result as shown in below image.\nBy the way, CubeRoot is not an example of a good macro. It doesn’t check for errors, so it fails easily.\nTo see what I mean, try clicking the Cancel button in the input box or entering a negative number.\nExecuting the Sub procedure directly The quickest way to execute this procedure is by doing so directly from the VBA module in which you defined it.\nFollow these steps:\nActivate the VBE and select the VBA module that contains the procedure. Move the cursor anywhere in the procedure’s code. Press F5 (or choose Run -\u0026gt; Run Sub/UserForm). Respond to the input box and click OK. The procedure displays the cube root of the number you entered. You can’t use the Run -\u0026gt; Run Sub/UserForm command to execute a Sub procedure that uses arguments, because you have no way to pass the arguments to the procedure.\nIf the procedure contains one or more arguments, the only way to execute it is to call it from another procedure — which must supply the argument(s).\nExecuting the Sub procedure from another procedure You can also execute a Sub procedure from another procedure.\nFollow these steps if you want to give this a try:\nActivate the VBA module that holds the CubeRoot routine.\nEnter this new procedure (either above or below CubeRoot code — it makes no difference):\nvba\r1 Sub NewSub() 2 Call CubeRoot 3 End Sub\rExecute the NewSub macro.\nThe easiest way to do this is to move the cursor anywhere within the NewSub code and press F5. Notice that this NewSub procedure simply executes the CubeRoot procedure.\nNote\nPlease note that the keyword Call is optional. The statement can consist of only the Sub procedure’s name. I find that using the Call keyword makes it perfectly clear that a procedure is being called.\nExecuting Function procedure Function procedures, unlike Sub procedures, can be only executed in only one way:\nBy calling the function from another Sub procedure or Function procedure. Try this simple function. Enter it into a VBA module:\nvba\r1Function CubeRoot() 2 CubeRoot = number ^ (1/3) 3End Function\rThis function is pretty bored — it merely calculates the cube root of the number passed to it as its argument.\nIt does provide a starting point for understanding functions.\nIt also presents an important concept about functions: how to return the value.\n(You do remember that a function returns a value, right?)\nNotice that the single line of code that makes up this Function procedure performs a calculation.\nThe result of the math (number to the power of 1⁄3) is assigned to the variable CubeRoot.\nNot coincidentally, CubeRoot is also the name of the function.\nTo tell the function what value to return, you assign that value to the name of the function.\nExecuting the Function procedure from a Sub procedure Because you can’t execute a function directly, you must call it from another procedure.\nEnter the following simple procedure in the same VBA module that contains the CubeRoot function:\nvba\r1Sub CubeRoot() 2 Ans = CubeRoot(125) 3 MsgBox Ans 4End Sub\rWhen you execute the CubeRoot procedure (using any of the methods described earlier), your software displays a message box that contains the value of the Ans variable, which is 5.\nHere’s what’s going on:\nCubeRoot(125) means it CubeRoot receive argument of 125. Then Function CubeRoot(number) is executed. As described previously, number is an argument. And here the value of this is 125. Then by number ^ (1/3) we get the cube of 125. (why? Because 125 is argument passed by the sub function and this 125 is the value of number.) After that cube value of 125, i.e. 5, is assigned to or given to or equal to CubeRoot. This CubeRoot assigned to or given to or equal to Ans. After that message boxes show the value of 5 in your screen. Note\nPlease read again if you don’t understand what is going on here.\nNext post will be about Programming Concepts, Comments and Data-types.\n","date":"0001-01-01","id":8,"permalink":"/vba/executing-procedures/","summary":"\u003cp\u003eAlthough you may not know much about developing procedures at this point, I’m going to jump ahead a bit and discuss how to execute these procedures.\u003c/p\u003e","tags":[],"title":"Executing Sub and Function Procedures"},{"content":"Visual Basic for application (VBA) is a real, live programming language, it uses many elements common to all programming languages.\nIn subsequent topics, we go through several of these elements:\nComments Variables Constants Data types Arrays and few other concepts If you’ve programmed with other languages, some of this topics will be familiar or if you’re a programming newbie, it’s time to roll up your sleeves and get busy.\nComments in VBA Code A comment is the simplest type of VBA statement because VBA ignores these statements, they can consist of anything you want.\nYou can insert a comment to remind yourself why you did something or to clarify some particularly code you wrote.\nUse comments liberally and extensively to describe what the code does (which isn’t always obvious by reading the code itself).\nOften, code that makes perfect sense today mystifies you tomorrow.\nYou begin a comment with an apostrophe (\u0026rsquo;). VBA ignores any text that follows an apostrophe in a line of code.\nYou can use a complete line for your comment or insert your comment at the end of a line of code.\nThe following example shows a VBA procedure with three comments, although they’re not necessarily good comments:\nvba\r1Sub CommentDemo() 2\u0026#39; This procedure does nothing of value 3 x = 0 \u0026#39;x represents nothing 4 \u0026#39;Display the result 5 MsgBox x 6End Sub\rThe apostrophe indicates a comment rule has one exception.\nVBA doesn’t interpret an apostrophe inside a set of quotation marks as a comment indicator.\nFor example, the following statement doesn’t contain a comment, even though it has an apostrophe:\nvba\r1MsgBox = \u0026#34;Can\u0026#39;t continue.\u0026#34;\rWhen you’re writing code, you may want to test a procedure by excluding a particular statement or group of statements.\nYou could delete the statements and then retype them later but that’s a waste of time.\nA better solution is to simply turn those statements into comments by inserting apostrophes.\nVBA ignores statements beginning with apostrophes when executing a routine.\nTo reactivate those commented statements, just remove the apostrophes.\nHere’s a quick way to convert a block of statements to comments.\nIn the VBE, choose View -\u0026gt; Toolbars -\u0026gt; Edit to display the Edit toolbar.\nTo convert a block of statements to comments, select the statements and click the Comment Block button.\nTo remove the apostrophes, select the statements and click the Uncomment Block button.\nAlthough comments can be helpful, not all comments are created equal.\nFor example, the following procedure uses lots of comments, but they add nothing of value.\nIn this case, the code is clear enough without the comments.\nvba\r1Sub BadComments() 2\u0026#39; Declare variables 3 Dim x As Integer 4 Dim y As Integer 5 Dim z As Integer 6\u0026#39; Start the routine 7 x = 100 \u0026#39;Assign 100 to x 8 y = 100 \u0026#39;Assign 100 to y 9\u0026#39; Add x and y and store in z 10 z = x + y 11\u0026#39; Show the result 12 MsgBox z 13End Sub\rEveryone develops his or her own style of commenting.\nTo be useful, however, comments should convey information that’s not immediately obvious from reading the code.\nOtherwise, comments just chew up bytes and make files larger than necessary.\nThe following tips can help you make effective use of comments:\nBriefly describe the purpose of each Sub or Function procedure you write.\nUse comments to keep track of changes you make to a procedure.\nUse a comment to indicate that you’re using a function or a construct in an unusual or nonstandard manner.\nUse comments to describe the variables you use, especially if you don’t use meaningful variable names.\nUse a comment to describe any workarounds you develop to overcome bugs in your code.\nWrite comments as you develop code, instead of saving the task for a final step.\nDepending on your work environment, consider adding a joke or two as a comment. The person who takes over your job when you get promoted might appreciate the humour.\nData types in VBA When I talk about data type, I’m referring to the manner in which a program stores data in memory - for example, as integers, real numbers, or strings.\nAlthough VBA can take care of these details automatically, it does so at a cost (There’s no free lunch).\nLetting VBA handle your data typing results in slower execution and inefficient memory use.\nFor small applications, this usually doesn’t present much of a problem.\nBut for large or complex applications, which may be slow or need to conserve every last byte of memory, you need to be on familiar terms with data types.\nVBA automatically handles all the data details, which makes life easier for programmers.\nNot all programming languages provide this luxury.\nFor example, some languages are strictly typed, which means the programmer must explicitly define the data type for every variable used.\nVBA does not require that you declare the variables that you use, but it’s definitely a good practice.\nVBA has a variety of built-in data types. Below table lists the most common types of data that VBA can handle.\nData Type Byte used Range of values Boolean 2 True or False Integer 2 –32,768 to 32,767 Long 4 –2,147,483,648 to 2,147,483,647 Single 4 –3.402823E38 to 1.401298E45 Double (negative) 8 –1.79769313486232E308 to –4.94065645841247E-324 Double (positive) 8 4.94065645841247E–324 to 1.79769313486232E308 Currency 8 –922,337,203,685,477.5808 to 922,337,203,685,477.5807 Date 8 1/1/100 to 12/31/9999 String 1 per char varies Object 4 Any defined object Variant Varies Any data type User defined Varies Varies Next post will be about VBA Variables.\n","date":"0001-01-01","id":9,"permalink":"/vba/programming-concepts/","summary":"\u003cp\u003eVisual Basic for application (VBA) is a real, live programming language, it uses many elements common to all programming languages.\u003c/p\u003e","tags":[],"title":"Programming Concepts, Comments and Data-types"},{"content":"VBA’s main purpose is to manipulate data. VBA stores the data in your computer’s memory; it may or may not end up on disk.\nSome data, such as sketch, resides in objects.\nOther data is stored in variables that you create.\nA variable is simply a named storage location in your computer’s memory.\nYou have lots of flexibility in naming your variables, so make the variable names as descriptive as possible.\nYou assign a value to a variable by using the equal sign operator.\nThe variable names in these examples appear on both the left and right sides of the equal signs.\nNote that the last example uses two variables.\nvba\r1x = 1 2InterestRate = 0.075 3LoanPayoffAmount = 243089 4DataEntered = False 5x = x + 1 6UserName = \u0026#34;Bill Gates\u0026#34; 7DateStarted = #3/14/2010# 8MyNum = YourNum * 1.25\rVBA enforces a few rules regarding variable names:\nYou can use letters, numbers, and some punctuation characters, but the first character must be a letter. You cannot use any spaces or periods in a variable name. VBA does not distinguish between uppercase and lowercase letters. You cannot use the following characters in a variable name: #, $, %, \u0026amp;, or !. Variable names can be no longer than 255 characters. Of course, you’re only asking for trouble if you use variable names 255 characters long. To make variable names more readable, programmers often use mixed case (for example, PartDimension) or the underscore character (part_dimension).\nVBA has many reserved words that you can’t use for variable names or procedure names.\nThese include words such as Sub, Dim, With, End, Next, and For.\nIf you attempt to use one of these words as a variable, you may get a compile error which means your code won’t run.\nSo, if an assignment statement produces an error message, double-check and make sure that the variable name isn’t a reserved word.\nVBA does allow you to create variables with names that match names in your CAD's object model, such as sketch and part.\nBut, obviously, using names like that just increases the possibility of getting confused.\nSo resist the urge to use a variable named sketch, and use something like swSketch, mySketch or any meaning full name instead.\n","date":"0001-01-01","id":10,"permalink":"/vba/variables/","summary":"\u003cp\u003e\u003ccode\u003eVBA’s\u003c/code\u003e main purpose is to manipulate data. \u003ccode\u003eVBA\u003c/code\u003e stores the \u003cem\u003edata\u003c/em\u003e in your computer’s \u003cem\u003ememory\u003c/em\u003e; it may or may not end up on disk.\u003c/p\u003e","tags":[],"title":"VBA Variables"},{"content":"If you read the previous topics, you now know a bit about 🚀Variables and Data-types.\nIn this topic, you discover how to declare a variable as a certain data type.\nIf you don’t declare the data type for a variable you use in a VBA routine, VBA uses the default data type: Variant.\nData stored as a Variant acts like a chameleon; it changes type depending on what you do with it.\nFor example, if a variable is a Variant data type and contains a text string that looks like a number (such as “123”), you can use this variable for string manipulations as well as numeric calculations.\nVBA automatically handles the conversion. Letting VBA handle data types may seem like an easy way out — but remember that you sacrifice speed and memory.\nBefore you use variables in a procedure, it’s an excellent practice to declare your variables — that is, tell VBA each variable’s data type.\nDeclaring your variables makes your program run faster and use memory more efficiently.\nThe default data type, Variant, causes VBA to repeatedly perform time consuming checks and reserve more memory than necessary.\nIf VBA knows a variable’s data type, it doesn’t have to investigate and can reserve just enough memory to store the data.\nTo force yourself to declare all the variables you use, include the following as the first statement in your VBA module:\nOption Explicit\rWhen this statement is present, you won’t be able to run your code if it contains any undeclared variables.\nYou need to use Option Explicit only once: at the beginning of your module, prior to the declaration of any procedures in the module.\nKeep in mind that the Option Explicit statement applies only to the module in which it resides.\nIf you have more than one VBA module in a project, you need an Option Explicit statement for each module.\nSuppose that you use an undeclared variable (that is, a Variant) named myDimension.\nAt some point in your routine, you insert the following statement:\nmyDimnsion = 11\rThis misspelled variable, which is difficult to spot, will probably cause your routine to give incorrect results.\nIf you use Option Explicit at the beginning of your module (forcing you to declare the myDimension variable), VBE generates an error if it encounters a misspelled variation of that variable.\nTo ensure that the Option Explicit statement is inserted automatically whenever you insert a new VBA module; turn on the Require Variable Definition option.\nYou find it in the Editor tab of the Options dialog box (in the VBE, choose Tools -\u0026gt; Options).\nNote\nI highly recommend doing so.\nDeclaring your variables also lets you take advantage of a shortcut that can save some typing.\nJust type the first two or three characters of the variable name, and then press Ctrl + Space.\nThe VBE will either complete the entry for you or — if the choice is ambiguous — show you a list of matching words to select from.\nIn fact, this slick trick works with reserved words and functions, too.\nYou now know the advantages of declaring variables, but how do you do this?\nThe most common way is to use a Dim statement.\nHere are some examples of variables being declared:\nDim YourName as String Dim PartLength as Long Dim bRet as Boolean Dim X\rThe first three variables are declared as a specific data type.\nThe last variable, X, is not declared as a specific data type, so it’s treated as a Variant (it can be anything).\nBesides Dim, VBA has three other keywords that are used to declare variables:\nStatic Public Private I explain more about the Dim, Static, Public, and Private keywords later on, but first I must cover two other topics that are relevant here: a variable’s scope and a variable’s life.\nRecall that your code can have any number of VBA modules and a VBA module can have any number of Sub and Function procedures.\nA variable’s scope determines which modules and procedures can use the variable.\nBelow Table describes the scopes:\nVBA’s Variable’s Scope Scope How the Variable is Declared Procedure only By using a Dim or a Static statement in the procedure that uses the variable. Module only By using a Dim or a Private statement before the first Sub or Function statement in the module. All procedures in all modules By using a Public statement before the first Sub or Function statement in the module. If you get confused keep reading next post on these topics.\nNext post will be about Variable Scope.\n","date":"0001-01-01","id":11,"permalink":"/vba/declaring-and-scoping-of-variables/","summary":"\u003cp\u003eIf you read the previous topics, you now know a bit about 🚀\u003cstrong\u003e\u003ca href=\"/vba/variables\"\u003eVariables\u003c/a\u003e and \u003ca href=\"/vba/programming-concepts#data-types-in-vba\"\u003eData-types\u003c/a\u003e\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eIn this topic, you discover how to \u003cstrong\u003edeclare\u003c/strong\u003e a \u003ccode\u003evariable\u003c/code\u003e as a certain \u003cem\u003edata type\u003c/em\u003e.\u003c/p\u003e","tags":[],"title":"Declaring and Scoping of Variables"},{"content":"At The CAD Coder, your privacy is important. This policy explains what personal data we collect and how we use it.\n👥 Personal Information We do not collect personal information unless you voluntarily provide it.\nThis website:\nDoes not require registration Does not request sensitive information May log visitor data anonymously for usage tracking and improvement If you submit your email through a form (e.g., newsletter signup), it will only be used for that purpose and never sold or shared.\n🍪 Cookies Like most websites, we use cookies to:\nImprove site speed and performance Understand visitor behavior Offer content supported by advertising (including affiliate links) We do not use cookies to:\nCollect personal data without consent Sell data to third parties 📊 Analytics \u0026amp; Tracking We use third-party analytics tools to help us understand how users interact with the site:\nGoogle Analytics\nSee Google’s Privacy Policy Analytics data may include:\nBrowser/device type Pages visited Time on site Referring sites (e.g., search engines) 🛍️ Affiliate Links Some pages may contain affiliate links (e.g., to Amazon).\nIf you make a purchase through these links, we may earn a small commission — at no extra cost to you.\n🌍 GDPR \u0026amp; CCPA Compliance If you are a resident of the EU or California, you have the right to:\nAccess the data we have about you Request correction or deletion Withdraw consent at any time To request your data or exercise these rights, please thecadcoder at gmail dot com\r.\n⚙️ Turning Off Cookies Most web browsers allow you to disable cookies in settings. Doing so may impact how this website functions.\nCheck your browser’s help section for instructions.\n📬 Contact If you have any questions about this Privacy Policy, contact:\n📧 thecadcoder [at] gmail [dot] com\nclick 👉 thecadcoder at gmail dot com\r.\n","date":"2025-07-09","id":12,"permalink":"/privacy/","summary":"How The CAD Coder collects, stores, and protects your data.","tags":[],"title":"Privacy Policy"},{"content":"A variable’s scope determines which modules and procedures can use the variable.\nProcedure-only Variables The lowest level of scope for a variable is at the procedure level.\nA procedure is either a Sub or a Function procedure.\nVariables declared with this scope can be used only in the procedure in which they are declared.\nWhen the procedure ends, the variable no longer exists (it goes to the great big bucket in the sky), and your CAD application frees up its memory.\nIf you execute the procedure again, the variable comes back to life, but its previous value is lost.\nThe most common way to declare a procedure-only variable is with a Dim statement.\nDim doesn’t refer to the mental capacity of the VBA designers.\nRather, it’s an old programming term that’s short for dimension, which simply means you are setting aside memory for a particular variable.\nYou usually place Dim statements immediately after the Sub or Function statement and before the procedure’s code.\nThe following example shows some procedure-only variables declared by using Dim statements:\nSub MySub() Dim x As Integer Dim First As Long Dim PartDimension As Single Dim myValue \u0026#39; ...[The procedure’s code goes here]... End Sub Notice that the last Dim statement in the preceding example doesn’t declare a data type; it declares only the variable itself. The effect is that the variable MyValue is a Variant.\nBy the way, you can also declare several variables with a single Dim statement, as in the following example:\nDim x As Integer, y As Integer, z As Integer Dim First As Long, Last As Double\rUnlike some languages, VBA doesn’t allow you to declare a group of variables to be a particular data type by separating the variables with commas.\nFor example, though valid, the following statement does not declare all the variables as Integers:\nDim i, j, k As Integer\rIn this example, only k is declared to be an Integer; the other variables are declared to be Variants.\nIf you declare a variable with procedure-only scope, other procedures in the same module can use the same variable name, but each instance of the variable is unique to its own procedure.\nIn general, variables declared at the procedure level are the most efficient because VBA frees up the memory they use when the procedure ends.\nModule-only Variables Sometimes, you want a variable to be available to all procedures in a module.\nIf so, just declare the variable (using Dim or Private) before the module’s first Sub or Function statement — outside any procedures.\nThis is done in the Declarations section, at the beginning of your module.\nThis is also where the Option Explicit statement is located.\nBelow figure shows how you know when you’re working with the Declarations section.\nAs shown in above image, I want a variable named swApp, so that it can available to all procedures in this module.\nHence I declare this variable in Declaration section of VBE.\nNext post wil be about Public, Static and Variable\u0026rsquo;s Life.\n","date":"0001-01-01","id":13,"permalink":"/vba/variable-scope/","summary":"\u003cp\u003eA \u003cem\u003evariable’s\u003c/em\u003e scope determines which modules and procedures can use the variable.\u003c/p\u003e\n\u003ch2 id=\"procedure-only-variables\"\u003eProcedure-only Variables\u003c/h2\u003e\n\u003cp\u003eThe \u003cem\u003elowest\u003c/em\u003e level of scope for a variable is at the \u003cstrong\u003eprocedure\u003c/strong\u003e level.\u003c/p\u003e","tags":[],"title":"Variable Scope"},{"content":"In the following sections we will discussed about following topics:\nPublic Variables\nStatic Variables\nLife of Variables\nLet\u0026rsquo;s look at them one by one.\nPublic Variables If you need to make a variable available to all the procedures in all your VBA modules, declare the variable at the module level (in the Declarations section) by using the Public keyword.\nFor example, in previous figure, if I use Public in place of Dim in declaration section of VBE, then you can use those variables in other procedures of same modules, and for other modules also.\nIf you would like a variable to be available to other modules, you must declare the variable as Public.\nIn practice, sharing a variable across modules is hardly ever done.\nBut I guess it’s nice to know that it can be done.\nStatic Variables Normally, when a procedure ends, all the procedure’s variables are reset.\nStatic variables are a special case because they retain their value even when the procedure ends.\nYou declare a static variable at the procedure level.\nA static variable may be useful if you need to track the number of times you execute a procedure.\nLife of Variables Nothing lives forever, including variables.\nThe scope of a variable not only determines where that variable may be used, it also affects under which circumstances the variable is removed from memory.\nYou can purge (remove) all variables from memory by using three methods:\nClick the Reset toolbar button (the little blue square button on the Standard toolbar in previous figure).\nClick End when a runtime error message dialog box shows up.\nInclude an End statement anywhere in your code. This is not the same as an End Sub or End Function statement. Generally it is an Exit statement.\nOtherwise, only procedure-level variables will be removed from memory when the macro code has completed running.\nStatic variables, module level variables, and global (public) variables all retain their values in between runs of your code.\nIf you use module-level or global-level variables, make sure they have the value you expect them to have. You never know whether one of the situations I just mentioned may have caused your variables to lose their content!\nNext post will be about VBA Constants.\n","date":"0001-01-01","id":14,"permalink":"/vba/public-static-and-variables-life/","summary":"\u003cp\u003eIn the following sections we will discussed about following topics:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003ePublic Variables\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eStatic Variables\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eLife of Variables\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eLet\u0026rsquo;s look at them one by one.\u003c/p\u003e","tags":[],"title":"Public, Static and Variable's Life"},{"content":"A variable’s value may (and usually does) change while your procedure is executing.\nThat’s why they call it a variable.\nSometimes you need to refer to a value or string that never changes.\nIn such a case, you need a constant — a named element whose value doesn’t change.\nAs shown in the following examples, you declare constants by using the Const statement.\nThe declaration statement also gives the constant its value:\nConst BlockLength As Integer = 4. Const BlockThickness = .5 Const PartName As String = \u0026#34;Part Name:\u0026#34; Public Const AppName As String = \u0026#34;Part Calculation\u0026#34;\rUsing constants in place of hard-coded values or strings is an excellent programming practice.\nFor example, if your procedure needs to refer to a specific value (such as sheet thickness) several times.\nIt is better to declare the value as a constant and refer to its name rather than the value.\nThis makes your code more readable and easier to change.\nWhen sheet thickness changes, you have to change only one statement rather than several.\nLike variables, constants have a scope. Keep these points in mind:\nTo make a constant available within only a single procedure, declare the constant after the procedure’s Sub or Function statement. To make a constant available to all procedures in a module, declare the constant in the Declarations section for the module. To make a constant available to all modules, use the Public keyword and declare the constant in the Declarations section of any module. If you attempt to change the value of a constant in a VBA routine, you get an error.\nThis isn’t too surprising because a Constant is constant.\nUnlike a variable, the value of a constant does not vary.\nIf you need to change the value of a constant while your code is running, what you really need is a variable.\nPre-made constants Your CAD Application and VBA contain many predefined constants, which you can use without the need to declare them yourself.\nThe macro recorder (in Solidworks) usually uses constants rather than actual values.\nIn general, you don’t need to know the value of these constants to use them.\nThe following simple procedure uses a built-in constant swDefaultTemplatePart to select the default part template while opening a new file.\nset swPart = swApp.NewDocument(swApp.GetUserPreferenceStringValue _ (swUserPreferenceStringValue_e.swDefaultTemplatePart),0,0,0)\rIn above example, Solidworks did not record these constants.\nIt simply generates the direct path to open part document.\nTo find the actual value of a built-in constant, use the \u0026ldquo;Immediate window\u0026rdquo; in the VBE, and execute a VBA statement such as the following:\n?swDefaultTemplatePart\rIf the Immediate window isn’t visible, press Ctrl+G. The question mark is a shortcut for typing Print.\nNext post will be about VBA Strings Basics.\n","date":"0001-01-01","id":15,"permalink":"/vba/constants/","summary":"\u003cp\u003eA variable’s value may (and usually does) change while your procedure is executing.\u003c/p\u003e\n\u003cp\u003eThat’s why they call it a \u003cstrong\u003evariable\u003c/strong\u003e.\u003c/p\u003e","tags":[],"title":"VBA Constants"},{"content":"The String data type represents a series of characters. This topic introduces the basic concepts of strings in Visual Basic.\nString Variables An instance of a string can be assigned a value that represents a series of characters as shown in below example:\nDim MyString As String MyString = \u0026#34;This is an example of the String data type\u0026#34;\rA String variable can also accept any expression that evaluates to a string as shown in below example:\nDim OneString As String Dim TwoString As String OneString = \u0026#34;one, two, three, four, five\u0026#34; TwoString = OneString.Substring(5, 3) \u0026#39; Output -\u0026gt; \u0026#34;two\u0026#34;. OneString = \u0026#34;1\u0026#34; TwoString = OneString \u0026amp; \u0026#34;1\u0026#34; \u0026#39; Output -\u0026gt; \u0026#34;11\u0026#34;.\rAny literal that is assigned to a String variable must be enclosed in quotation marks (\u0026quot;\u0026quot;).\nThis means that a quotation mark (\u0026quot;\u0026quot;) within a string cannot be represented by a quotation mark.\nFor example, the following code causes a compiler error:\nDim myString As String \u0026#39; This line would cause an error. myString = \u0026#34;He said, \u0026#34;Look at this example!\u0026#34;\u0026#34;\rThis code causes an error because the compiler terminates the string after the second quotation mark, and the remainder of the string is interpreted as code.\nThis means compiler think He said, is a string and Look at this example! as a VB code.\nBut we want compiler to know that we want He said, \u0026quot;Look at this example!\u0026quot; as a string value.\nTo solve this problem, Visual Basic interprets two quotation marks in a string literal as one quotation mark in the string.\nThe following example shows the correct way to include a quotation mark in a string:\n\u0026#39; The value of myString is: He said, \u0026#34;Look at this example!\u0026#34; myString = \u0026#34;He said, \u0026#34;\u0026#34;Look at this example!\u0026#34;\u0026#34; \u0026#34;\rIn the preceding example, the two quotation marks before and after the word Look become one quotation mark in the string.\nThe Immutability of Strings A string is immutable, which means its value cannot be changed once it has been created.\nHowever, this does not prevent us from assigning more than one value to a string variable as shown in below example:\nDim myString As String = \u0026#34;This string is immutable\u0026#34; myString = \u0026#34;Or is it?\u0026#34;\rHere, a string variable is created, given a value, and then its value is changed.\nIn the first line, an instance of type String is created and given the value This string is immutable.\nIn the second line of the example, a new instance is created and given the value Or is it?, and the string variable discards its reference to the first instance and stores a reference to the new instance.\nUnlike other intrinsic data types, String is a reference type.\nWhen a variable of reference type is passed as an argument to a function or subroutine, a reference to the memory address where the data is stored is passed instead of the actual value of the string.\nSo in the previous example, the name of the variable remains the same, but it points to a new and different instance of the String class, which holds the new value.\nNext post will be about VBA Assignment Statements And Operators.\n","date":"0001-01-01","id":16,"permalink":"/vba/string-basics/","summary":"\u003cp\u003eThe \u003ccode\u003eString\u003c/code\u003e data type represents a series of characters. This topic introduces the basic concepts of strings in Visual Basic.\u003c/p\u003e","tags":[],"title":"VBA String Basics"},{"content":"An assignment statement is a VBA statement that assigns the result of an expression to a variable or an object.\nIn a book I read Excel’s Help system defines the term expression as:\n\u0026ldquo;Combination of keywords, operators, variables, and constants that yields a string, number, or object. An expression can be used to perform a calculation, manipulate characters, or test data.\u0026rdquo;\nMuch of your work in VBA involves developing (and debugging) expressions.\nIf you know how to create simple formulas in Excel, you’ll have no trouble creating expressions.\nWith a formula, Excel displays the result in a cell.\nA VBA expression, on the other hand, can be assigned to a variable.\nFor understanding purpose, I used Excel as an example. Please don\u0026rsquo;t get confused with it.\nIn the assignment statement examples that follow, the expressions are to the right of the equal sign:\nX = 1 X = x + 1 X = (y * 2) / (z * 2) NumberOfParts = 15 SelectObject = True\rExpressions can be as complex as you need them to be; use the line continuation character (a space followed by an underscore) to make lengthy expressions easier to read.\nOperators As you can see in the VBA uses the equal sign as its assignment operator.\nYou’re probably accustomed to using an equal sign as a mathematical symbol for equality.\nTherefore, an assignment statement like the following may cause you to raise your eyebrows:\nx = x + 1\rHow can the variable x be equal to itself plus 1?\nAnswer: It can’t.\nIn this case, the assignment statement is increasing the value of x by 1.\nJust remember that an assignment uses the equal sign as an operator, not a symbol of equality.\n{% include adsense/adsense-horizontal-ads.html %}\nSmooth Operators Operators play a major role in VBA. Besides the assignment operator i.e. equal sign (discussed in the previous topic), VBA provides several other operators.\nBelow table lists these operators.\nVBA’s Operators\rFunction\rOperator Symbol\rAddition\r+\rMultiplication\r*\rDivision\r/\rSubtraction\r-\rExponentiation\r^\rString concatenation\r\u0026#38;\rInteger division (the result is always an integer)\r\\\rModulo arithmetic (returns the remainder of a division operation)\rMod\rThe term concatenation is programmer speak for “join together”.\nThus, if you concatenate strings, you are combining strings to make a new and improved string.\nVBA also provides a full set of logical operators. Below table, shows some of logical operators.\nVBA’s Logical Operators\rOperator\rWhat is does\rNot\rPerforms a logical negation on an expression.\rAnd\rPerforms a logical conjunction on two expressions.\rOr\rPerforms a logical disjunction on two expressions.\rXoR\rPerforms a logical exclusion on two expressions.\rEqv\rPerforms a logical equivalence on two expressions.\rImp\rPerforms a logical implication on two expressions.\rThe precedence order for operators in VBA is exactly the same as in Excel formulas.\nExponentiation has the highest precedence. multiplication and division come next, followed by addition and subtraction.\nYou can use parentheses to change the natural precedence order, making whatever’s operation in parentheses come before any operator.\nTake a look at this code:\nz = x + 5 * y\rWhen this code is executed, what’s the value of z?\nIf you answered 13, you get a gold star that proves you understand the concept of operator precedence.\nIf you answered 16, read this: The multiplication operation (5 * y) is performed first, and that result is added to x.\nIf you answered something other than 13 or 16, I have no comment.\nBy the way, I can never remember how operator precedence works, so I tend to use parentheses even when they aren’t required.\nFor example, in real life I would write that last assignment statement like this:\nz = x + (5 * y)\rDon’t be shy about using parentheses even if they aren’t required — especially if doing so makes your code easier to understand. VBA doesn’t care if you use extra parentheses.\nNext post will be about VBA Arrays.\n","date":"0001-01-01","id":17,"permalink":"/vba/assignment-statements-and-operators/","summary":"\u003cp\u003eAn \u003cem\u003eassignment statement\u003c/em\u003e is a \u003cem\u003eVBA statement\u003c/em\u003e that assigns the result of an expression to a variable or an object.\u003c/p\u003e","tags":[],"title":"VBA Assignment Statements And Operators"},{"content":"The term looping refers to repeating a block of VBA statements numerous times.\nVBA provides various looping command for repeating code to make correct decision making.\nWe will go through them in following topics:\nFor -Next Loop The simplest type of loop is a For-Next loop. Here’s the syntax for this structure:\nFor counter = start To end [Step stepval] [statements] [Exit For] [statements] Next [counter]\rThe looping is controlled by a counter variable, which starts at one value and stops at another value.\nThe statements between the For statement and the Next statement are the statements that get repeated in the loop.\nTo see how this works, keep reading.\nFor-Next example The following example shows a For-Next loop that doesn’t use the optional Step value or the optional Exit For statement.\nThis routine loops 10 times and uses the VBA MsgBox function to show a number from 1 to 10:\nSub ShowNumbers1() Dim i As Integer For i = 1 to 10 MsgBox i Next i End Sub\rIn this example, i (the loop counter variable) starts with a value of 1 and increases by 1 each time through the loop.\nBecause I didn’t specify a Step value the MsgBox method uses the value of i as an argument.\nThe first time through the loop, i is 1 and the procedure shows a number.\nThe second time through (i = 2), the procedure show a number, and so on.\nSub ShowNumbers2() Dim i As Integer Step 2 For i = 1 to 10 MsgBox i Next i End Sub\rCount starts out as 1 and then takes on a value of 3, 5, 7, and 9. The final Count value is 9.\nThe Step value determines how the counter is incremented. Notice that the upper loop value (9) is not used because the highest value of Count after 9 would be 11, and 11 is larger than 10.\nFor-Next example with an Exit For statement A For-Next loop can also include one or more Exit For statements within the loop.\nWhen VBA encounters this statement, the loop terminates immediately.\nHere’s the same procedure as in the preceding section, rewritten to insert random numbers.\nSub ShowNumbers3() Dim i As Integer Step 2 For i = 1 to 10 If i = 5 Then MsgBox “This is a mid value” Exit For End If MsgBox i Next i End Sub\rThis routine performs the as earlier but when the variable i reached to 5, it shows a message, stating that this is a mid value and exit from loop.\nDo-While Loop VBA supports another type of looping structure known as a Do-While loop.\nUnlike a For-Next loop, a Do-While loop continues until a specified condition is met.\nHere’s the Do-While loop syntax:\n\u0026#39; Do-While Structure Do [While condition] [statements] [Exit Do] [statements] Loop\rThe following example uses a Do-While loop. This routine uses 1 as a starting point and runs through next numbers.\nThe loop continues until the routine encounter the condition of i = 8.\n\u0026#39; Do-While Example Sub ShowNumbers4() Dim i As Integer Do While i \u0026lt;\u0026gt; 8 MsgBox i i = i + 1 Loop End Sub\rSome people prefer to code a Do-While loop as a Do-Loop While loop.\nThis example performs exactly as the previous procedure but uses different loop syntax:\n\u0026#39; Do-Loop While Example Sub ShowNumbers5() Dim i As Integer Do MsgBox i i = i + 1 Loop While i \u0026lt;\u0026gt; 8 End Sub\rHere’s the key difference between the Do-While and Do-Loop While loops.\nThe Do-While loop always performs its conditional test first. If the test is not true, the instructions inside the loop are never executed.\nThe Do-Loop While loop, on the other hand, always performs its conditional test after the instructions inside the loop are executed.\nThus, the loop instructions are always executed at least once, regardless of the test.\nThis difference can sometimes have a big effect on how your program functions.\nDo-Until Loop The Do-Until loop structure is similar to the Do-While structure.\nThe two structures differ in their handling of the tested condition.\nA program continues to execute a Do-While loop while the condition remains true.\nIn a Do-Until loop, the program executes the loop until the condition is true. Here’s the Do-Until syntax:\n\u0026#39; Do-Until Structure Do [Until condition] [statements] [Exit Do] [statements] Loop\rThe following example is the same one presented for the Do-While loop but recoded to use a Do-Until loop:\nSub ShowNumbers6() Dim i As Integer Do Until i \u0026lt;\u0026gt; 8 MsgBox i i = i + 1 Loop End Sub\rJust like with the Do-While loop, you may encounter a different form of the Do-Until loop — a Do-Loop Until loop.\nThe following example, which has the same effect as the preceding procedure, demonstrates an alternate syntax for this type of loop:\nSub ShowNumbers7() \u0026#39; Do-Loop Until Example Dim i As Integer Do MsgBox i i = i + 1 Loop Until i \u0026lt;\u0026gt; 8 End Sub\rThere is a subtle difference in how the Do-Until loop and the Do-Loop Until loop operate.\nIn the former, the test is performed at the beginning of the loop, before anything in the body of the loop is executed.\nThis means that it is possible that the code in the loop body will not be executed if the test condition is met.\nIn the later version, the condition is tested at the end of the loop.\nTherefore, at a minimum, the Do-Loop Until loop always results in the body of the loop being executed once.\nAnother way to think about it is like this: The Do-While loop keeps looping as long as the condition is true.\nThe Do-Until loop keeps looping as long as the condition is False.\nLooping through a Collection VBA supports yet another type of looping — looping through each object in a collection of objects.\nPlease note that I have not covered Object topic so far. For your understanding I give a brief explanation about collection.\nA collection is a group of same type of objects.\nFor example, a drawing file in any CAD application is a collection of Sheets, and each sheet is a collection of drawing views and so on.\nWhen you need to loop through each object in a collection, use the For Each-Next structure. The syntax is\n\u0026#39; For Each-Next Structure For Each element In collection [statements] [Exit For] [statements] Next [element]\rThe following example loops through each drawing sheet in the active drawing and shows name of each active drawing sheet:\n\u0026#39; For Each-Next Example Option Explicit Dim swApp As SldWorks.SldWorks Dim swPart As SldWorks.ModelDoc2 Dim swDwg As SldWorks.DrawingDoc Dim BoolStatus As Boolean Dim SheetNamesList As Variant Sub ShowSheetName() Set swApp = Application.SldWorks Set swPart = swApp.ActiveDoc Set swDwg = swPart SheetNamesList = swDwg.GetSheetNames Dim SheetName As Variant For Each SheetName In SheetNamesList MsgBox SheetName Next SheetName End Sub\rIn this example, first we get the list of all sheet names in opened drawing, then we loop through each sheet name in collection and show sheet name in a message box.\nFor this example please notes that we did not need to load all sheet, this code can work on non-activate and non-loaded sheets also.\nNext post will be about Bug Finding.\n","date":"0001-01-01","id":18,"permalink":"/vba/looping/","summary":"\u003cp\u003eThe term \u003cem\u003elooping\u003c/em\u003e refers to repeating a block of VBA statements numerous times.\u003c/p\u003e\n\u003cp\u003eVBA provides various looping command for repeating code to make correct decision making.\u003c/p\u003e","tags":[],"title":"VBA Looping"},{"content":"A bug is an error in your programming. Here I cover the topic of programming bugs — how to identify them and how to remove them from your module.\nTypes of Bugs The term program bug, as you probably know, refers to a problem with software.\nIn other words, if software doesn’t perform as expected, it has a bug.\nFact is, all major software programs have bugs — lots of bugs.\nA CAD software like Solidworks itself has hundreds (if not thousands) of bugs.\nFortunately, the vast majority of these bugs are relatively obscure and appear in only very specific circumstances.\nWhen you write non-trivial VBA programs, your code probably will have bugs.\nThis is a fact of life and not necessarily a reflection of your programming ability. The bugs may fall into any of the following categories:\nLogical flaws in your code: You can often avoid these bugs by carefully thinking through the problem your program addresses.\nIncorrect context bugs: This type of bug surfaces when you attempt to do something at the wrong time. For example, you may try to update the sketch dimension and there are no sketch is activated.\nExtreme-case bugs: These bugs rear their heads when you encounter data you didn’t anticipate, such as very large or very small numbers.\nWrong data types bugs: This type of bug occurs when you try to process data of the wrong type, such as attempting to take the square root of a text string.\nDebugging is the process of identifying and correcting bugs in your program.\nDeveloping debugging skills takes time, so don’t be discouraged if this process is difficult at first.\nIt’s important to understand the distinction between bugs and syntax errors.\nA syntax error is a language error. For example, you might misspell a keyword, omit the Next statement in a For-Next loop, or have a mismatched parenthesis.\nBefore you can even execute the procedure, you must correct these syntax errors.\nA program bug is much subtler. You can execute the routine, but it doesn’t perform as expected.\nIdentifying Bugs Before you can do any debugging, you must determine whether a bug actually exists.\nYou can tell that your macro contains a bug if it doesn’t work the way it should. Usually, but not always, you can easily discern this.\nA key fact known to all programmers is that bugs often appear when you least expect them.\nFor example, just because your macro works fine with one data set doesn’t mean you can assume it will work equally as well with all data sets.\nOr your macro runs fine in your system but not working properly in your friend\u0026rsquo;s system.\nSuch cases happened all the time and are part of debugging.\nThe best debugging approach is to start with thorough testing, under a variety of real-life conditions.\nBecause any changes made by your VBA code cannot be undone, it is always a good idea to use a backup copy of your CAD files that you use for testing.\nI usually copy some files into a temporary folder and use those files for my testing.\nDebugging Techniques In this section, I discuss the some of the most common methods for debugging VBA code:\nExamine your code Inserting MsgBox functions at various locations in your code Inserting Debug.Print statement Examine your code Perhaps the most straightforward debugging technique is simply taking a close look at your code to see whether you can find the problem.\nIf you’re lucky, the error jumps right out, and you can fix the problem.\nNotice I said, “If you’re lucky.” That’s because often you discover errors when you have been working on your program for long hours and you are running on caffeine and willpower.\nAt times like that, you are lucky if you can even see your code.\nThus, don’t be surprised if simply examining your code isn’t enough to make you find and expunge all the bugs it contains.\nUsing the MsgBox function A common problem in many programs involves one or more variables not taking on the values you expect.\nIn such cases, monitoring the variable(s) while your code runs is a helpful debugging technique.\nOne way to do this is by inserting temporary MsgBox functions into your routine.\nFor example, I used MsgBox function to check conditions. Whenever I use If-Else statement, I put one message in If condition and put another message in Else condition.\nBy this way, I make sure condition which I want is working correct or not.\nFeel free to use MsgBox functions frequently when you debug your code.\nJust make sure that you remove them after you identify and correct the problem.\nInserting Debug.Print Statement As an alternative to using MsgBox functions in your code, you can insert one or more temporary Debug.Print statements.\nUse these statements to print the value of one or more variables in the Immediate window.\nHere’s an example that displays a message of \u0026ldquo;This condition is working fine\u0026rdquo;.\nIf swPart Is Nothing Then Debug.Print \u0026#34;This condition is working fine.\u0026#34;\rIf VBE’s Immediate window is not visible, press Ctrl+G.\nUnlike MsgBox, Debug.Print statements do not halt your code.\nSo you’ll need to keep an eye on the Immediate window to see what’s going on.\nAfter you’ve debugged your code, be sure to remove all the Debug.Print statements.\nNext post will be about VBA Debugger.\n","date":"0001-01-01","id":19,"permalink":"/vba/bug-finding/","summary":"\u003cp\u003eA \u003cstrong\u003ebug\u003c/strong\u003e is an error in your programming. Here I cover the topic of programming bugs — how to identify them and how to remove them from your module.\u003c/p\u003e","tags":[],"title":"Bug Finding"},{"content":"Most programming languages support arrays. An array is a group of variables that share a common name.\nYou refer to a specific variable in the array by using the array name and an index number in parentheses.\nFor example, you can define an array of 12 string variables to hold the names of the months of the year.\nIf you name the array MonthNames, you can refer to the first element of the array as MonthNames(1), the second element as MonthNames(2), and so on.\nDim MonthNames(\u0026#34;Jan\u0026#34;, \u0026#34;Feb\u0026#34;, \u0026#34;Mar\u0026#34;, \u0026#34;April\u0026#34;, \u0026#34;May\u0026#34;, \u0026#34;Jun\u0026#34;, \u0026#34;July\u0026#34;, \u0026#34;Aug\u0026#34;, \u0026#34;Sep\u0026#34;, \u0026#34;Oct\u0026#34;, \u0026#34;Nov\u0026#34;, \u0026#34;Dec\u0026#34;) As string print(MonthNames(1)) \u0026#39;print Feb\rDeclaring Arrays Before you can use an array, you must declare it. No exceptions.\nUnlike normal variables, VBA is very strict about this rule.\nYou declare an array with a Dim or Public statement, just as you declare a regular variable.\nHowever, you also need to specify the number of elements in the array.\nYou do this by specifying the first index number, the keyword To, and the last index number — all inside parentheses.\nThe following example shows how to declare an array of 100 integers:\nDim MyArray(1 To 100) As Integer\rWhen you declare an array, you can choose to specify only the upper index.\nVBA assumes that 0 is the lower index. Therefore, both of the following statements declare the same 101-element array:\nDim MyArray(1 To 100) As Integer Dim MyArray(1 To 100)\rIf you want VBA to assume that 1 (rather than 0) is the lower index for your arrays, include the following statement in the Declarations section of your module:\nOption Base 1\rThis statement forces VBA to use 1 as the first index number for arrays that declare only the upper index.\nIf above statement is present, the following statements are identical, both declaring a 100-element array:\nDim MyArray(1 To 100) As Integer Dim MyArray(1 To 100)\rThere are two other arrays\nMulti-dimensional array\nDynamic array\nBut I don’t think these two are that much useful for use to learn hence we will not delve into them.\nNext post will be about VBA Functions.\n","date":"0001-01-01","id":20,"permalink":"/vba/arrays/","summary":"\u003cp\u003eMost programming languages support \u003ccode\u003earrays\u003c/code\u003e. An \u003cem\u003earray\u003c/em\u003e is a group of variables that share a common name.\u003c/p\u003e\n\u003cp\u003eYou refer to a \u003cem\u003especific variable\u003c/em\u003e in the \u003ccode\u003earray\u003c/code\u003e by using the \u003cem\u003earray name\u003c/em\u003e and an \u003cem\u003eindex number\u003c/em\u003e in \u003cem\u003eparentheses\u003c/em\u003e.\u003c/p\u003e","tags":[],"title":"VBA Arrays"},{"content":"In this section, I discuss the details of using the VBA debugging tools.\nThese tools are much more powerful than the techniques I discuss in the previous section.\nBut along with power comes responsibility. Using the debugging tools takes a bit of setup work.\nSetting breakpoints in your code In earlier sections, I discuss using MsgBox functions in your code to monitor the values of certain variables.\nDisplaying a message box essentially halts your code in mid-execution, and clicking the OK button resumes execution.\nWouldn’t it be nice if you could halt a routine’s execution, take a look at the value of any of your variables, and then continue execution?\nWell, that’s exactly what you can do by setting a breakpoint.\nYou can set a breakpoint in your VBA code in several ways:\nMove the cursor to the statement at which you want execution to stop; then press F9. Click in the gray margin to the left of the statement at which you want execution to stop. This is I used mainly. Position the insertion point in the statement at which you want execution to stop. Then use the Debug -\u0026gt; Toggle Breakpoint command. Right-click a statement and choose Toggle -\u0026gt; Breakpoint from the shortcut menu. The results of setting a breakpoint are shown in below figure.\nVBE highlights the line to remind you that you set a breakpoint there; it also inserts a large dot in the gray margin.\nWhen you execute the procedure, VBE goes into Break mode before the line with the breakpoint is executed.\nIn Break mode, the word break is displayed in the VBE title bar.\nTo get out of Break mode and continue execution, press F5 or click the Run Sub/UserForm button in the VBE toolbar.\nTo quickly remove a breakpoint, click the large dot in the gray margin or move the cursor to the highlighted line and press F9.\nTo remove all breakpoints in the module, press Ctrl+Shift+F9.\nWhat is Break mode? You can think of it as a state of suspended animation.\nYour VBA code stops running and the current statement is highlighted in bright yellow. In Break mode, you can\nType VBA statements in the Immediate window. Press F8 to step through your code one line at a time to check various things while the program is paused. Move the mouse pointer over a variable to display its value in a small pop-up window. Skip the next statement(s) and continue execution there (or even go back a couple of statements). Edit a statement and then continue. Below figure shows some debugging action.\nA breakpoint is set (notice the big dot), and I’m using the F8 key to step through the code line by line (notice the arrow that points to the current statement).\nI used the Immediate window to print Hello world.\nUsing the Immediate window The Immediate window may not be visible in the VBE.\nYou can display the VBE’s Immediate window at any time by pressing Ctrl+G.\nIn Break mode, the Immediate window is particularly useful for finding the current value of any variable in your program.\nFor example, if you want to know the current value of a variable, enter the following in the Immediate window and press Enter.\nThe Immediate window lets you do other things besides check variable values.\nFor example, you can change the value of a variable, try for a new condition.\nJust make sure that the command you enter is a valid VBA statement.\nStepping through your code While in Break mode, you can also step through your code line by line.\nOne statement is executed each time you press F8.\nThroughout this line-by-line execution of your code, you can activate the Immediate window at any time to check the status of your variables.\nYou can use your mouse to change which statement VBA will execute next.\nIf you put your mouse pointer in the gray margin to the left of the currently highlighted statement (which will usually be yellow), your pointer changes to a right-pointing arrow.\nSimply drag your mouse to the statement you want done next and watch that statement turn yellow.\nUsing the Watch window In some cases, you may want to know whether a certain variable or expression takes on a particular value.\nFor example, suppose that a procedure loops through 1,000 times.\nYou notice that a problem occurs during the 800th iteration of the loop.\nWell, you could insert a breakpoint in the loop, but that would mean responding to 799 prompts before the code finally gets to the iteration you want to see (and that gets boring real fast).\nA more efficient solution involves setting a watch expression.\nFor example, you can create a watch expression that puts the procedure into Break mode whenever a certain variable takes on a specific value — for example, AnyNumber=800.\nTo create a watch expression, choose Debug -\u0026gt; Add Watch to display the Add Watch dialog box. See below figure.\nThe Add Watch dialog has three parts:\nExpression: Enter a valid VBA expression or a variable here. For example, AnyNumber=900 or just AnyNumber.\nContext: Select the procedure and the module you want to watch. Note that you can select All Procedures and All Modules.\nWatch Type: Select the type of watch by clicking an option button. Your choice here depends on the expression you enter. The first choice, Watch Expression, does not cause a break; it simply displays the expression’s value when a break occurs.\nExecute your procedure after setting up your watch expression(s).\nThings run normally until your watch expression is satisfied (based on the Watch Type you specified).\nWhen that happens, VBE enters Break mode (you did set the Watch Type to “Break When Value Is True,” didn’t you?).\nFrom there, you can step through the code or use the Immediate window to debug your code.\nWhen you create a watch, VBE displays the Watches window shown in below figure.\nThis window displays the value of all watches that you’ve defined.\nIn this figure, when the value hit 800, which caused VBE to enter Break mode.\nThe best way to understand how this Watch business works is to use it and try various options.\nBefore long, you’ll probably wonder how you ever got along without it.\nUsing the Locals window Another useful debugging aid is the Locals window.\nYou can show this window by choosing View -\u0026gt; Locals Window from the VBE’s menu.\nWhen you are in Break mode, this window will show you a list of all variables that are local to the current procedure (see below figure).\nThe nice thing about this window is that you don’t have to add a load of watches manually if you want to look at the content of many variables.\nThe VBE has done all the hard workfor you.\nNext post will be about VBA Bug Reduction Tips.\n","date":"0001-01-01","id":21,"permalink":"/vba/debugger/","summary":"\u003cp\u003eIn this section, I discuss the details of using the VBA debugging tools.\u003c/p\u003e\n\u003cp\u003eThese tools are much more powerful than the techniques I discuss in the previous section.\u003c/p\u003e","tags":[],"title":"VBA Debugger"},{"content":"A function essentially performs a calculation and returns a single value.\nThe SUM function in MS Excel returns the sum of a range of values.\nThe same holds true for functions used in your VBA expressions: Each function does its thing and returns a single value.\nThe functions you use in VBA can come from two sources:\nBuilt-in functions provided by VBA Custom functions that you (or someone else) write, using VBA. Built-In VBA Functions VBA provides numerous built-in functions. Some of these functions take arguments and some do not.\nI present a few examples of VBA functions in code.\nIn many of these examples, I use the MsgBox function to display a value in a message box.\nYes, MsgBox is a VBA function — a rather unusual one, but a function nonetheless.\nThis useful function displays a message in a pop-up dialog box.\nDisplaying the system date or time The first example uses VBA’s Date function to display the current system date in a message box:\nSub ShowDate() MsgBox Date End Sub\rNotice that the Date function doesn’t use an argument.\nA VBA function with no argument doesn’t require an empty set of parentheses.\nIn fact, if you type an empty set of parentheses, the VBE will promptly remove them.\nTo get the system time, use the Time function. And if you want it all, use the Now function to return both the date and the time.\nSub ShowDate() MsgBox Now End Sub\rFinding a string length The following procedure uses the VBA\u0026rsquo;s Len function, which returns the length of a text string.\nThe Len function takes one argument: the string.\nWhen you execute this procedure, the message box displays 11 because the argument has 11 characters.\nSub StringLength() Dim MyString As String Dim StringLength As Integer MyString = “Hello World” StringLength = Len(MyString) MsgBox StringLength End Sub\rDisplaying the integer part of a number The following procedure uses the Fix function, which returns the integer portion of a value — the value without any decimal digits:\nSub GetIntegerPart() Dim MyValue As Double Dim IntValue As Integer MyValue = 123.456 IntValue = Fix(MyValue) MsgBox IntValue End Sub\rIn this case, the message box displays 123.\nVBA has a similar function called Int Function.\nThe difference between Int and Fix is how each deals with negative numbers.\nIt’s a subtle difference, but sometimes it’s important.\nInt Function returns the first negative integer that’s less than or equal to the argument. Int(-123.456) returns -124.\nFix Function returns the first negative integer that’s greater than or equal to the argument. Fix(-123.456) returns -123.\nDetermining a file size The following Sub procedure displays the size, in bytes, of the executable file.\nIt finds this value by using the FileLen function.\nSub GetFileSize() Dim TheFile As String TheFile “C:\\ProgramFiles\\Program File\\SolidworksCorp\\SLDWORKS\\SLDWORKS.exe” MsgBox FileLen(TheFile) End Sub\rNotice that this routine hard codes the filename (that is, it explicitly states the path).\nGenerally, this isn’t a good idea. The file might not be on the C drive, or the Program File folder may have a different location.\nThe following statement shows a better approach:\nTheFile = Application.Path \u0026amp; “\\SLDWORKS.EXE” Path is a property of the Application object.\nIt simply returns the name of the folder in which the application (that is, Solidworks) is installed (without a trailing backslash).\nIdentifying the type of a selected object The following procedure uses the TypeName function, which returns the type of the selection (as a string):\nSub ShowSelectionType() Dim SelType As String SelType = TypeName(Selection) MsgBox SelType End Sub\rThis could be a Sketch, a Part, a Assembly or any other type of object that can be selected.\nThe TypeName function is very versatile. You can also use this function to determine the data type of a variable.\nNext post will be about VBA Functions that do more.\n","date":"0001-01-01","id":22,"permalink":"/vba/functions/","summary":"\u003cp\u003eA \u003ccode\u003efunction\u003c/code\u003e essentially performs a calculation and returns a single value.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eSUM\u003c/code\u003e function in \u003cstrong\u003eMS Excel\u003c/strong\u003e returns the sum of a range of values.\u003c/p\u003e","tags":[],"title":"VBA Functions"},{"content":"I can’t tell you how to completely eliminate bugs in your programs.\nFinding bugs in software can be a profession by itself, but I can provide a few tips to help you keep those bugs to a minimum:\nUse an Option Explicit statement at the beginning of your modules. This statement requires you to define the data type for every variable you use. This creates a bit more work for you, but you avoid the common error of misspelling a variable name. And it has a nice side benefit: Your routines run a bit faster.\nFormat your code with indentation. Using indentations helps delineate different code segments. If your program has several nested For-Next loops, for example, consistent indentation helps you keep track of them all.\nUse lots of comments. Nothing is more frustrating than revisiting code you wrote six months ago and not having a clue as to how it works. By adding a few comments to describe your logic, you can save lots of time down the road.\nKeep your Sub and Function procedures simple. By writing your code in small modules, each of which has a single, well-defined purpose, you simplify the debugging process.\nUse the macro recorder to help identify properties and methods. When I can’t remember the name or the syntax of a property or method, I often simply record a macro and look at the recorded code\nDebugging code is not one of my favorite activities, but it’s a necessary evil that goes along with programming.\nAs you gain more experience with VBA, you spend less time debugging and, when you have to debug, are more efficient at doing so.\nNext post will be about VBA Dialog Boxes.\n","date":"0001-01-01","id":23,"permalink":"/vba/bug-reduction-tips/","summary":"\u003cp\u003eI can’t tell you how to completely eliminate bugs in your programs.\u003c/p\u003e\n\u003cp\u003eFinding bugs in software can be a profession by itself, but I can provide a few tips to help you keep those bugs to a minimum:\u003c/p\u003e","tags":[],"title":"VBA Bug Reduction Tips"},{"content":"A few VBA functions go above and beyond the call of duty. Rather than simply return a value, these functions have some useful side effects.\nBelow table lists them.\nFunctions with Useful Side Benefits\rFunction\rWhat is does\rMsgBox\rDisplays a handy dialog box containing a message and buttons. The function returns a code that identifies which button the user clicks.\rInputBox\rDisplays a simple dialog box that asks the user for some input. The function returns whatever the user enters into the dialog box.\rShell\rExecutes another program. The function returns the task ID (a unique identifier) of the other program (or an error if the function can’t start the other program).\rGetObject/CreateObject\rReturns/Create a reference to an object provided by an ActiveX component. (If you don't understand, don't bother about it. Just remember we use this function to for checking \u0026#38; creating objects in later topics)\rDiscovering VBA functions How do we find out which function does VBA provides?\nThe best source is the Visual Basic Help system in build in your CAD Application.\nI compiled a partial list of functions, which I share with you in following Table.\nI omitted some of the more specialized or obscure functions.\nFor complete details on a particular function, type the function name into a VBA module, move the cursor anywhere in the text, and press F1.\nVBA’s Most Useful Built-In Functions\rFunction\rWhat is does\rAbs\rReturns a number’s absolute value.\rArray\rReturns a variant containing an array.\rAsc\rConverts the first character of a string to its ASCII value.\rAtn\rReturns the arctangent of a number.\rChoose\rReturns a value from a list of items.\rChr\rConverts an ANSI value to a string.\rCos\rReturns a number’s cosine.\rCurDir\rReturns the current path.\rDate\rReturns the current system date.\rDateAdd\rReturns a date to which a specified time interval has been added — for example, one month from a particular date.\rDatePart\rReturns an integer containing the specified part of a given date — for example, a date’s day of the year.\rDateSerial\rConverts a date to a serial number.\rDateValue\rConverts a string to a date.\rDay\rReturns the day of the month from a date value.\rDir\rReturns the name of a file or directory that matches a pattern.\rErl\rReturns the line number that caused an error.\rErr\rReturns the error number of an error condition.\rError\rReturns the error message that corresponds to an error number.\rExp\rReturns the base of the natural logarithm (e) raised to a power.\rFileLen\rReturns the number of bytes in a file.\rFix\rReturns a number’s integer portion.\rFormat\rDisplays an expression in a particular format.\rGetSetting\rReturns a value from the Windows registry.\rHex\rConverts from decimal to hexadecimal.\rHour\rReturns the hours portion of a time.\rInputBox\rDisplays a box to prompt a user for input.\rInStr\rReturns the position of a string within another string.\rInt\rReturns the integer portion of a number.\rIPmt\rReturns the interest payment for an annuity or loan.\rIsArray\rReturns True if a variable is an array.\rIsDate\rReturns True if an expression is a date.\rIsEmpty\rReturns True if a variable has not been initialized.\rIsError\rReturns True if an expression is an error value.\rIsMissing\rReturns True if an optional argument was not passed to a procedure.\rIsNull\rReturns True if an expression contains no valid data.\rIsNumeric\rReturns True if an expression can be evaluated as a number.\rIsObject\rReturns True if an expression references an OLE Automation object.\rLBound\rReturns the smallest subscript for a dimension of an array.\rLCase\rReturns a string converted to lowercase.\rLeft\rReturns a specified number of characters from the left of a string.\rLen\rReturns the number of characters in a string.\rLog\rReturns the natural logarithm of a number to base.\rLTrim\rReturns a copy of a string, with any leading spaces removed.\rMid\rReturns a specified number of characters from a string.\rMinutes\rReturns the minutes portion of a time value.\rMonth\rReturns the month from a date value.\rMsgBox\rDisplays a message box and (optionally) returns a value.\rNow\rReturns the current system date and time.\rRGB\rReturns a numeric RGB value representing a color.\rReplace\rReplaces a substring in a string with another substring.\rRight\rReturns a specified number of characters from the right of a string.\rRnd\rReturns a random number between 0 and 1.\rRTrim\rReturns a copy of a string, with any trailing spaces removed.\rSecond\rReturns the seconds portion of a time value.\rSgn\rReturns an integer that indicates a number’s sign.\rShell\rRuns an executable program.\rSin\rReturns a number’s sine.\rSpace\rReturns a string with a specified number of spaces.\rSplit\rSplits a string into parts, using a delimiting character.\rSqr\rReturns a number’s square root.\rStr\rReturns a string representation of a number.\rStrComp\rReturns a value indicating the result of a string comparison.\rString\rReturns a repeating character or string.\rTan\rReturns a number’s tangent.\rTime\rReturns the current system time.\rTimer\rReturns the number of seconds since midnight.\rTimeSerial\rReturns the time for a specified hour, minute, and second.\rTimeValue\rConverts a string to a time serial number.\rTrim\rReturns a string without leading or trailing spaces.\rTypeName\rReturns a string that describes a variable’s data type.\rUBound\rReturns the largest available subscript for an array’s dimension.\rUCase\rConverts a string to uppercase.\rVal\rReturns the numbers contained in a string.\rVarType\rReturns a value indicating a variable’s subtype.\rWeekday\rReturns a number representing a day of the week.\rYear\rReturns the year from a date value.\r","date":"0001-01-01","id":24,"permalink":"/vba/functions-that-do-more/","summary":"\u003cp\u003eA few VBA \u003ccode\u003efunctions\u003c/code\u003e go above and beyond the call of duty. Rather than simply return a value, these functions have some useful side effects.\u003c/p\u003e","tags":[],"title":"VBA Functions that do more"},{"content":"Some VBA procedures start at the code’s beginning and progress line by line to the end, never deviating from this top-to-bottom program flow.\nMacros that you record always work like this.\nIn many cases, however, you need to control the flow of your code by skipping over some statements, executing some statements multiple times, and testing conditions to determine what the procedure does next.\nSome programming newbies can’t understand how a dumb computer can make intelligent decisions.\nThe secret is in several programming constructs that most programming languages support.\nFollowing table provides a quick summary of these constructs.\nProgramming Constructs for Making Decisions\rConstruct\rHow it works\rIf-Then structure\rDoes something if something else is true.\rSelect Case\rDoes any of several things, depending on something’s value.\rFor-Next loop\rExecutes a series of statements a specified number of times.\rDo-While loop\rDoes something as long as something else remains true.\rDo-Until loop\rDoes something until something else becomes true.\rNext post will be about If-Then-Else and Select Case structure.\n","date":"0001-01-01","id":25,"permalink":"/vba/controlling-program-flow-and-making-decisions/","summary":"\u003cp\u003eSome VBA \u003cem\u003eprocedures\u003c/em\u003e start at the code’s beginning and progress line by line to the end, never deviating from this top-to-bottom program flow.\u003c/p\u003e","tags":[],"title":"Controlling Program Flow and Making Decisions"},{"content":"If-Then is VBA’s most important control structure. You’ll probably use this command on a daily basis.\nAs in many other aspects of life, effective decision-making is the key to success in writing CAD or any other macros.\nThe If-Then structure has this basic syntax:\nIf condition Then statements [Else elsestatements]\rUse the If-Then structure when you want to execute one or more statements conditionally.\nThe optional Else clause, if included, lets you execute one or more statements if the condition you’re testing is not true.\nSound confusing? Don’t worry; a few examples make this crystal clear.\nIf-Then examples The following routine demonstrates the If-Then structure without the optional Else clause:\nSub GoodMorning() If Time \u0026lt; 0.5 Then MsgBox “Good Morning.” End Sub\rThe GoodMorning procedure uses VBA’s Time function to get the system time.\nIf the current system time is less than .5 (in other words, before noon), the routine displays a friendly greeting.\nIf Time is greater than or equal to .5, the routine ends and nothing happens.\nTo display a different greeting if Time is greater than or equal to .5, add another If-Then statement after the first one:\nSub GoodMorning2() If Time \u0026lt; 0.5 Then MsgBox “Good Morning.” If Time \u0026gt;= 0.5 Then MsgBox “Good Afternoon.” End Sub\rNotice that I used \u0026gt;= (greater than or equal to) for the second If-Then statement.\nThis ensures that the entire day is covered. Had I used \u0026gt; (greater than), then no message would appear if this procedure were executed at precisely 12:00 noon.\nIf-Then-Else examples Another approach to the preceding problem uses the Else clause.\nHere’s the same routine recoded to use the If-Then-Else structure:\nSub GoodMorning3() If Time \u0026lt; 0.5 Then MsgBox “Good Morning.” Else _ MsgBox “Good Afternoon.” End Sub\rNotice that I use the line continuation character (underscore) in the preceding example.\nThe If-Then-Else statement is actually a single statement.\nVBA provides a slightly different way of coding If-Then-Else constructs that use an End-If statement.\nTherefore, the GoodMorning procedure can be rewritten as:\nSub GoodMorning4() If Time \u0026lt; 0.5 Then MsgBox “Good Morning.” Else MsgBox “Good Afternoon.” End If End Sub\rIn fact, you can insert any number of statements under the If part, and any number of statements under the Else part.\nI prefer to use this syntax because it’s easier to read and makes the statements shorter.\nWhat if you need to expand the GoodMorning routine to handle three conditions: morning, afternoon, and evening?\nYou have two options: Use three If-Then statements or use a nested If-Then-Else structure.\nNesting means placing an If-Then-Else structure within another If-Then-Else structure.\nThe first approach, the three statements, is simplest:\nSub GoodMorning5() If Time \u0026lt; 0.5 Then Msg = “Morning.” If Time \u0026gt;= 0.5 And Time \u0026lt; 0.75 Then Msg = “Afternoon.” If Time \u0026gt;= 0.75 Then Msg = “Evening.” MsgBox “Good” \u0026amp; Msg End Sub\rThe Msg variable gets a different text value, depending on the time of day.\nThe final MsgBox statement displays the greeting: Good Morning, Good Afternoon, or Good Evening.\nThe following routine performs the same action but uses an If-Then-End If structure:\nSub GoodMorning6()\rDim Msg As String\rIf Time \u0026lt; 0.5 Then\rMsg = “Morning.”\rIf Time \u0026gt;= 0.5 And Time \u0026lt; 0.75 Then\rMsg = “Afternoon.”\rIf Time \u0026gt;= 0.75 Then\rMsg = “Evening.”\rEnd If\rMsgBox “Good” \u0026amp; Msg\rEnd Sub\rIf-ElseIf-Else examples In the previous examples, every statement in the routine is executed — even in the morning.\nA more efficient structure would exit the routine as soon as a condition is found to be true.\nIn the morning, for example, the procedure should display the Good Morning message and then exit — without evaluating the other superfluous conditions.\nWith a tiny routine like this, you don’t have to worry about execution speed.\nBut for larger applications in which speed is important, you should know about another syntax for the If-Then structure.\nThe ElseIf syntax follows:\nIf condition Then [statements] [Else condition-n Then [elseifstatements]] [Else [elsestatements]]\rHere’s how you can rewrite the GreetMe routine by using this syntax:\nSub GoodMorning7() Dim Msg As String If Time \u0026lt; 0.5 Then Msg = “Morning.” ElseIf Time \u0026gt;= 0.5 And Time \u0026lt; 0.75 Then Msg = “Afternoon.” Else Msg = “Evening.” End If MsgBox “Good” \u0026amp; Msg End Sub\rWhen a condition is true, VBA executes the conditional statements and the If structure ends.\nIn other words, VBA doesn’t waste time evaluating the extraneous conditions, which makes this procedure a bit more efficient than the previous examples.\nThe trade-off (there are always trade-offs) is that the code is more difficult to understand. (Of course, you already knew that.)\nSelect Case structure The Select Case structure is useful for decisions involving three or more options (although it also works with two options, but using If-Then-Else structure is more efficient for that).\nThe syntax for the Select Case structure follows:\nSelect Case testexpression [Case expressionlist-n [statements-n]] [Case Else [elsestatements]] End Select\rDon’t be scared off by this official syntax. Using the Select Case structure is quite easy.\nSelect Case example The following example shows how to use the Select Case structure.\nThis also shows another way to code the examples presented in the previous section:\nSub SelectPartLength() Dim PartNumber As Integer Dim PartLength As Integer PartNumber = InputBox(“Please Enter part number:”) Select Case PartNumber Case Part001 PartLength = 1 Case Part002 PartLength = 2 Case Part003 PartLength = 3 End Select MsgBox “Part Length for this” \u0026amp; PartNumber \u0026amp; “is” \u0026amp; PartLength End Sub\rIn this example, the PartNumber variable is being evaluated.\nThe routine is checking for three different cases.\nNext post will be about VBA Looping.\n","date":"0001-01-01","id":26,"permalink":"/vba/if-then-structure-select-case/","summary":"\u003cp\u003e\u003ccode\u003eIf-Then\u003c/code\u003e is VBA’s most important control structure. You’ll probably use this command on a daily basis.\u003c/p\u003e\n\u003cp\u003eAs in many other aspects of life, effective \u003cem\u003edecision-making\u003c/em\u003e is the key to success in writing CAD or any other macros.\u003c/p\u003e","tags":[],"title":"If-Then-Else and Select Case structure"},{"content":"Well-thought-through product announcements will help increase feature awareness and engage users with new functionality. Just like sharing your public roadmap, it\u0026rsquo;s also a great way to let potential customers see that you\u0026rsquo;re constantly improving.\nFurther reading Read How to announce product updates and features ","date":"2023-09-07","id":27,"permalink":"/blog/example-post/","summary":"You can use blog posts for announcing product updates and features.","tags":[],"title":"Example Post"},{"content":"","date":"2023-09-07","id":28,"permalink":"/blog/","summary":"","tags":[],"title":"Blog"},{"content":"Guides lead a user through a specific task they want to accomplish, often with a sequence of steps. Writing a good guide requires thinking about what your users are trying to do.\nFurther reading Read about how-to guides in the Diátaxis framework ","date":"2023-09-07","id":29,"permalink":"/docs/example-guide/","summary":"\u003cp\u003eGuides lead a user through a specific task they want to accomplish, often with a sequence of steps. Writing a good guide requires thinking about what your users are trying to do.\u003c/p\u003e","tags":[],"title":"Example Guide"},{"content":"Reference pages are ideal for outlining how things work in terse and clear terms. Less concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what your documenting.\nFurther reading Read about reference in the Diátaxis framework ","date":"2023-09-07","id":30,"permalink":"/docs/example-reference/","summary":"\u003cp\u003eReference pages are ideal for outlining how things work in terse and clear terms. Less concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what your documenting.\u003c/p\u003e","tags":[],"title":"Example Reference"},{"content":"Link to valuable, relevant resources.\n","date":"2024-02-27","id":31,"permalink":"/docs/resources/","summary":"\u003cp\u003eLink to valuable, relevant resources.\u003c/p\u003e","tags":[],"title":"Resources"},{"content":"","date":"2023-09-07","id":32,"permalink":"/docs/","summary":"","tags":[],"title":"Docs"},{"content":"","date":"2025-07-09","id":33,"permalink":"/about/","summary":"","tags":[],"title":"Abouts"},{"content":"","date":"2025-07-09","id":34,"permalink":"/resource/","summary":"","tags":[],"title":"Resources"},{"content":"","date":"2023-09-07","id":35,"permalink":"/","summary":"","tags":[],"title":"The CAD Coder"},{"content":"","date":"2023-09-07","id":36,"permalink":"/vba/","summary":"","tags":[],"title":"Vbas"},{"content":"Welcome to the CAD Coder Knowledge Base — a curated collection of my technical learnings, experiments, and solutions.\nAs a CAD Engineer turned Automation Developer, I’ve faced many struggles: lack of beginner-friendly material, poor documentation, and scattered knowledge across forums.\nThis section of the site aims to fix that.\n🎯 Purpose of This Knowledge Base This is not a traditional blog.\nHere, I document the core technical knowledge I’ve gained, in a structured and reusable format.\nYou’ll find:\nConcept breakdowns XML/WiX and SolidWorks macro examples Practical insights from my own projects Minimal fluff — only what actually works in real-world CAD automation 👤 Who This Is For This is built for:\nMechanical Engineers transitioning into programming Developers working with SolidWorks, WPF, or WiX Engineers trying to automate daily tasks using VBA or C# Anyone tired of copy-pasting macros and wants to understand how things work If you’re one of them — welcome home.\n🧱 How It’s Structured The knowledge base is divided into sections based on tools and platforms I use daily:\n📂 SolidWorks VBA Macros Step-by-step automation with Visual Basic for Applications (VBA) for SolidWorks.\n👉 Start Learning VBA Macros →\n💻 C# + SolidWorks API Modern automation using the SolidWorks API with C# and .NET. This includes macro development, standalone apps, and more.\n👉 Browse SolidWorks C# Articles →\n⚙️ WiX Installer Projects How to build professional Windows installers using WiX Toolset — with XML configurations, desktop icons, program entries, and more.\n👉 WiX Tutorials Start Here →\n🛠️ Programming Essentials for Engineers Lessons I’ve learned about how to think like a programmer, debug, and write code as a non-CS-background engineer.\n👉 Coming Soon…\n🔄 This Page Will Evolve Like engineering itself, this page is iterative.\nAs I learn, build, and test more things, I’ll update this section with:\nNew sections Updated code samples Deeper guides based on reader feedback 📬 Want More? If you want updates when I publish something new, join the mailing list (coming soon) or just bookmark this page.\nLet’s build tools that work — and understand how they’re built.\n🧠 Stay curious. Stay building.\n","date":"0001-01-01","id":37,"permalink":"/knowledge-base/","summary":"\u003cp\u003eWelcome to the \u003cstrong\u003eCAD Coder Knowledge Base\u003c/strong\u003e — a curated collection of my technical learnings, experiments, and solutions.\u003cbr\u003e\nAs a CAD Engineer turned Automation Developer, I’ve faced many struggles: lack of beginner-friendly material, poor documentation, and scattered knowledge across forums.\u003c/p\u003e","tags":[],"title":"📘 Introduction to the Knowledge Base"},{"content":"","date":"0001-01-01","id":38,"permalink":"/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":39,"permalink":"/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":40,"permalink":"/knowledge-base/","summary":"","tags":[],"title":"Knowledge Bases"},{"content":"","date":"0001-01-01","id":41,"permalink":"/tags/","summary":"","tags":[],"title":"Tags"}]